"""" ++++ PLUGINS ++++
" Install Vim-Plug if it isn't already
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'bronson/vim-trailing-whitespace'
Plug 'rpdelaney/vim-sourcecfg'
"Plug 'raimondi/delimitmate'
Plug 'scrooloose/syntastic'
Plug 'itchyny/lightline.vim'
Plug 'tikhomirov/vim-glsl'
Plug 'withgod/vim-sourcepawn'
Plug 'mbbill/undotree'

" Colorschemes
Plug 'ErichDonGubler/vim-sublime-monokai'
Plug 'flazz/vim-colorschemes'
Plug 'dracula/vim',{'as':'dracula'}
Plug 'romainl/Apprentice',{'as':'Apprentice'}
Plug 'morhetz/gruvbox'
call plug#end()
"""" ---- PLUGINS ----

"""" ++++ FUNCTIONS ++++
function! GetCursorChar()
    return char2nr(matchstr(getline('.'), '\%' . col('.') . 'c.'))
endfunction

" This is all taken from the vim fandom wiki
"
" Return indent (all whitespace at start of a line), converted from
" tabs to spaces if what = 1, or from spaces to tabs otherwise.
" When converting to tabs, result has no redundant spaces.
function! Indenting(indent, what, cols)
    let spccol = repeat(' ', a:cols)
    let result = substitute(a:indent, spccol, '\t', 'g')
    let result = substitute(result, ' \+\ze\t', '', 'g')
    if a:what == 1
        let result = substitute(result, '\t', spccol, 'g')
    endif
    return result
endfunction

" Convert whitespace used for indenting (before first non-whitespace).
" what = 0 (convert spaces to tabs), or 1 (convert tabs to spaces).
" cols = string with number of columns per tab, or empty to use 'tabstop'.
" The cursor position is restored, but the cursor will be in a different
" column when the number of characters in the indent of the line is changed.
function! IndentConvert(line1, line2, what, cols)
    let savepos = getpos('.')
    let cols = empty(a:cols) ? &tabstop : a:cols
    execute a:line1 . ',' . a:line2 . 's/^\s\+/\=Indenting(submatch(0), a:what, cols)/e'
    call histdel('search', -1)
    call setpos('.', savepos)
endfunction
command! -nargs=? -range=% Space2Tab
            \ call IndentConvert(<line1>,<line2>,0,<q-args>)
command! -nargs=? -range=% Tab2Space
            \ call IndentConvert(<line1>,<line2>,1,<q-args>)
command! -nargs=? -range=% RetabIndent
            \ call IndentConvert(<line1>,<line2>,&et,<q-args>)
"""" ---- FUNCTIONS ----

"""" ++++ AUTOCMDS ++++
au FileType c,h,hpp,cpp,diff,cs,python,vim,sh,cfg,sp,inc setlocal nowrap

au BufWritePre * if get(g:, 'whitespacefix', 1) | :FixWhitespace
"au BufWritePre * RetabIndent

au BufWinEnter * normal zR

au BufRead,BufNewFile vimrc setlocal expandtab
au BufRead,BufNewFile aliasrc,defines,defines\d set filetype=sh
au BufRead,BufNewFile *.conf,*.cfg set filetype=conf
au BufRead,BufNewFile *.inc set filetype=include | set syntax=sourcepawn

au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\""
    \| endif

" open NERDTree automatically when vim starts up on opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter *
            \| if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in")
            \| exe 'NERDTree' argv()[0]
            \| wincmd p
            \| ene
            \| endif
"""" ---- AUTOCMDS ----

"""" ++++ GENERAL CONFIG ++++
syntax enable
let mapleader=' '
set nocompatible
set encoding=UTF-8
set exrc
set secure
set number relativenumber
set hidden
set ttyfast
set laststatus=2
set showmode
set showcmd
set wildmode=longest,list,full

set backup
set writebackup
set undofile
set swapfile

set colorcolumn=80
set wrap
set textwidth=0
set tabstop=4
set shiftwidth=4
set noexpandtab
set autoindent
set smartindent
"set list
set listchars=tab:\ \ →,eol:¬,space:·
set scrolloff=3

set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
"""" ---- GENERAL CONFIG ----

"""" ++++ PLUGIN CONFIG ++++
let delimitMate_matchpairs="(:),[:],{:}"

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = { 'mode': 'passive',
            \ 'active_filetypes': [],
            \ 'passive_filetypes': [] }
"""" ---- PLUGIN CONFIG ----

"""" ++++ MAPPINGS ++++
set pastetoggle=<F2>

nnoremap <F3> @q
nnoremap <F4> @w
nnoremap <F5> @e

nnoremap <F2> :set invpaste paste?<CR>
imap <F2> <C-O>:set invpaste paste?<CR>

"Clear search string
nmap <silent> <leader>/ :let @/=''<CR>

"Decrease scope indent
nnoremap <C-h> <i{<CR>
"Increase scope indent
nnoremap <C-l> >i{<CR>

"Show charcode under cursor
nnoremap <silent> <leader>cc :echo "Charcode:" GetCursorChar()<CR>
" Toggle folds
nnoremap <silent> <space>f @=(foldlevel('.')?'za':"\<space>")<CR>
nnoremap <silent> <C-f> zM
nnoremap <leader>F zR
"vnoremap <space><space> zf

"Spellcheck toggle
nnoremap <silent> <leader>p :setlocal spell! <bar> :echo "Spellcheck" &spell ? "on" : "off"<CR>
"Linewrap toggle
nnoremap <silent> <leader>g :setlocal wrap! <bar> :echo "Linewrap" &wrap ? "on" : "off"<CR>
"Toggle between inserting tabs and spaces
nnoremap <silent> <leader><tab> :setlocal expandtab! <bar> :echo "Expandtab" &expandtab ? "on" : "off"<CR>
"Toggle cursorline
nnoremap <silent> <leader><C-c> :setlocal cursorline! <bar> :echo "Cursorline" &cursorline ? "on" : "off"<CR>
" Show whitespace characters
map <silent> <leader>l :set list! <bar> :echo "Whitepsace" &list ? "visible" : "invisible"<CR>
"Toggle whitespace fix on file write
nnoremap <silent> <F1> :let g:whitespacefix = !get(g:, 'whitespacefix', 1) <bar> :echo "Whitespace fix" get(g:, 'whitespacefix', 1) ? "on" : "off"<CR>

nnoremap <silent> U :echo " < < ===== C H E C K   C A P S   L O C K ===== > > "<CR>

"Move line up
nnoremap <C-k> VdkP
"Move line down
nnoremap <C-j> Vdp

nnoremap <leader>n :n<CR>
nnoremap <leader>p :p<CR>

"Copy line below
nnoremap <C-c> mZVyp`Zj
"Delete line
nnoremap <C-d> mZVd`Z
"Copy in insert mode
inoremap <C-c> <esc>mZVyp`Z<right>i
"Delete in insert mode
inoremap <C-d> <esc>Vdi

"Toggle Hexmode
nnoremap <leader>H :Hexmode<CR>

nnoremap <leader>w :w<CR>
nnoremap <leader>W :w!<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>Q :q!<CR>
nnoremap <leader>e :e<CR>
nnoremap <leader>E :e!<CR>
nnoremap <leader><C-e> :E<CR>
nnoremap Q :q!<CR>

" Tabs
nnoremap <silent> <leader><C-Right> :tabnext<CR>
nnoremap <silent> <leader><C-Left>  :tabprevious<CR>
nnoremap <silent> <leader><C-w>     :tabclose<CR>

" Splits
nnoremap <silent> <leader><C-L> <C-W>l
nnoremap <silent> <leader><C-H> <C-W>h
nnoremap <silent> <leader><C-K> <C-W>k
nnoremap <silent> <leader><C-J> <C-W>j

nnoremap <leader>T :hi Normal guibg=NONE ctermbg=NONE<CR>
nnoremap <leader>Y :hi Normal guibg=gruvbox ctermbg=235<CR>

" Plugin binds
nnoremap <leader>pi :PlugInstall<CR>
nnoremap <leader>pc :PlugClean<CR>
nnoremap <leader>pu :PlugUpdate<CR>
nnoremap <leader>pU :PlugUpgrade<CR>
nnoremap <leader>ps :PlugStatus<CR>
map      <leader>t  :NERDTreeToggle<CR>
"""" ---- MAPPINGS ----

"""" ++++ COLORS ++++
" Set to 256 for 256+ terms, as well as good colorscheme support
" Set to 16 to use xresources
set t_Co=16
set t_ut=
set background=light
"colorscheme gruvbox
" Add this to make transparent background
" Add it to the bottom of the colorscheme file
" and it'll work whenever you use that colorscheme
hi Normal guibg=NONE ctermbg=NONE
hi ColorColumn ctermbg=darkgrey ctermfg=NONE guibg=red
"""" ---- COLORS ----
