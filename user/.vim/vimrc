"""" TODO TODO TODO """"
" Clean this whole thing up, reorganize, simplify, and make it more focused

"{{{ PLUGINS
" Install Vim-Plug if it isn't already
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')

let g:ale_disable_lsp=1
" MISC
Plug 'sickill/vim-monokai'
Plug 'itchyny/lightline.vim'
Plug 'mbbill/undotree'
Plug 'pseewald/vim-anyfold'
Plug 'airblade/vim-gitgutter'
Plug 'bronson/vim-trailing-whitespace'
"nerdtree
Plug 'preservim/nerdtree'
Plug 'dsimidzija/vim-nerdtree-ignore'
Plug 'wsdjeg/vim-fetch'
Plug 'godlygeek/tabular'

" SYNTAX ENGINES
Plug 'Omnisharp/omnisharp-vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
"Plug 'dense-analysis/ale'
Plug 'jackguo380/vim-lsp-cxx-highlight'
Plug 'lervag/vimtex'
Plug 'esalter-va/vim-checklist'
Plug 'turbio/bracey.vim', {'do': 'npm install --prefix server'}
"Plug 'ap/vim-css-color'
Plug 'beyondmarc/hlsl.vim'

" SYNTAX HIGHLIGHTING
Plug 'shiracamus/vim-syntax-x86-objdump-d'
Plug 'gisphm/vim-gitignore'
Plug 'rpdelaney/vim-sourcecfg'
Plug 'tikhomirov/vim-glsl'
Plug 'withgod/vim-sourcepawn'

call plug#end()
"}}} PLUGINS
"{{{ FUNCTIONS
function! GetCursorChar()
    return char2nr(matchstr(getline('.'), '\%' . col('.') . 'c.'))
endfunction

function! SilentExec(cmd)
    let cmd = substitute(a:cmd, '^!', '', '')
    let cmd = substitute(cmd, '%', shellescape(expand('%')), '')
    call system(cmd)
endfunction

function! CompTexRefMU()
    call SilentExec('compiler %')
    if get(g:, 'mupdf_open', 0)
        call SilentExec("pkill --signal HUP mupdf")
    else
        let l:pdff = expand('%:r').'.pdf'
        if filereadable(l:pdff)
            silent !mupdf %:r.pdf & disown
            let g:mupdf_open = 1
        endif
    endif
endfunction

function! OnOff(status)
    return a:status ? "on" : "off"
endfunction

function! ToggleWhitespaceFix()
    let g:whitespacefix = !get(g:, 'whitespacefix', 1)
endfunction
"}}} FUNCTIONS
"{{{ PLUGIN CONFIG
" TRIM OUT THE FAT - GlaDOS
"{{{ Git Gutter
let g:gitgutter_signs = 1
let g:gitgutter_highlight_lines = 0
let g:gitgutter_highlight_linesnrs = 500
let g:gitgutter_sign_added              = '+'
let g:gitgutter_sign_removed            = '-'
let g:gitgutter_sign_modified           = '~'
let g:gitgutter_sign_removed_first_line = 'K'
let g:gitgutter_sign_modified_removed   = '`'
let g:gitgutter_map_keys = 0
"}}}
"{{{ CoC
" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" Use K to show documentation in preview window.
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
nnoremap <silent> K :call <SID>show_documentation()<CR>

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Use autocmd to force lightline update.
autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()
"}}}
"{{{ ALE
let g:ale_sign_error = '!'
let g:ale_sign_warning = '?'
let g:ale_sign_style_error = '!'
let g:ale_sign_style_warning = '?'

let g:ale_linters = {
\ 'cs': ['Omnisharp'],
\ 'c':[],
\ 'python':['flake8', 'pylint'],
\}
"}}}
"{{{ Undotree
let g:undotree_WindowLayout=2
let g:undotree_SplitWidth=40
let g:undotree_DiffpanelHeight=10
let g:undotree_SetFocusWhenToggle=1
let g:undotree_RelativeTimestamp=0
"}}}
"{{{ Misc
" NERDTree
let NERDTreeIgnore = ['\.meta','\.o']
" Vimtex
let g:tex_flavor = 'latex'
let g:vimtex_compiler_enabled = 0

" Vim-Checklist
noremap <space>V :ChecklistToggleCheckbox<cr>

" FixWhitespace
let g:extra_whitespace_ignored_filetypes = ['diff', 'patch']
"}}}
let g:lsp_cxxx_hl_use_text_props = 1 " the fuck is this?
"}}} PLUGIN CONFIG
"{{{ VIM CONFIG
" TRIM OUT THE FAT - GlaDOS
syntax enable
filetype plugin indent on
let mapleader=' '
set pastetoggle=<F2>
set nocompatible
set encoding=UTF-8
set exrc
set secure
set number
set nohidden
set ttyfast
set laststatus=2
set noshowmode
set showcmd
"commandmode autocomplete
set wildmode=longest,list,full
set wildmenu
"create a backup file
set writebackup
"do not delete backup file
set backup
set undofile
set undolevels=1000
set undoreload=0
set swapfile

set updatetime=300
set signcolumn=number
set colorcolumn=80
set wrap
set textwidth=0
""" indenting and tabs
set tabstop=4
"defaults to tabstop when 0
set shiftwidth=0
set shiftround
set noexpandtab
set autoindent
set smartindent

set listchars=tab:→\ \ ,space:·,eol:~,extends:>,precedes:⏗,trail:¬
set fillchars=vert:\ ,fold:\ ,stl:\ ,stlnc:\ ,eob:\ 
set scrolloff=3
"modified default
set shortmess=inxtoO
set shortmess+=cwmsI
set completeopt-=preview
set completeopt+=popup,noinsert
"don't do folds when opening a file (doesn't disable fold feature)
set nofoldenable
set foldnestmax=1
set foldmethod=marker
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
"}}} GENERAL CONFIG
"{{{ MAPPINGS
"{{{ Misc
"clear search string
nnoremap <silent> <space>/ :let @/=""<CR>
nnoremap <F2> :set invpaste paste?<CR>
nnoremap <silent> <space>. :source $MYVIMRC<cr>
nnoremap U :echo " < < ===== C H E C K   C A P S   L O C K ===== > > "<CR>
"view next/previous file
nnoremap <silent> <space>n :next<cr>
nnoremap <silent> <space>N :previous<cr>

noremap <F3> :call EchoSyntaxInfo(line("."), col("."))<CR>
noremap <F4> :call EchoStyleInfo(line("."), col("."))<CR>
"}}}
"{{{ File controls
" Close all but current buffer
nnoremap <silent> mbo  :%bd <bar> e# <bar> bd#<cr>

nnoremap <space>w :w<cr>
nnoremap <space>W :w!<cr>
nnoremap <space>q :q<cr>
nnoremap <space>Q :q!<cr>
nnoremap Q :echo "It's '\<space\>Q' milord!"<cr>
nnoremap <space>e :e<cr>
nnoremap <space>E :e!<cr>
nnoremap <space><C-e> :E<cr>
nnoremap <space><space>q :wq<cr>

nnoremap <space>cd :lcd %:p:h<cr>:pwd<cr>
nnoremap <space>u  :lcd %:p:h:h<cr>:pwd<cr>
"}}}
"{{{ Folds
nnoremap <silent> fa za
nnoremap <silent> fA zA
nnoremap <silent> tf @=(&foldlevel?'zm':'zR')<CR>
nnoremap <silent> tF @=(&foldlevel?'zM':'zR')<CR>
"}}}
"{{{ Toggles
noremap <space>p :setlocal spell! <bar> echo "Spellcheck ".OnOff(&spell)<CR>
noremap <space>g :set wrap! <bar> echo "Linewrap ".OnOff(&wrap)<CR>
noremap <space><tab> :setlocal expandtab! <bar> echo "Expandtab ".OnOff(&expandtab)<CR>
noremap <space>C :set cursorline! <bar> echo "Cursorline " .OnOff(&cursorline)<CR>
noremap <space>c :set cursorcolumn! <bar> echo "Cursorcolumn " .OnOff(&cursorcolumn)<CR>
noremap <space>i :set list! <bar> echo "Whitespace ".OnOff(&list)<CR>
noremap <F1> :call ToggleWhitespaceFix() <bar> echo "Whitespace fix ".OnOff(get(g:, 'whitespacefix', 1))<CR>
"}}}
"{{{ Line manipulation
nnoremap <c-j> mZddp`Zj
nnoremap <c-k> mZddkP`Z2k
nnoremap <c-c> mZyyp`Zj
inoremap <c-d> <esc>Vdi
inoremap <c-c> <esc>mZyyp`Zjli
"}}}
"{{{ split nav
nnoremap <space>h <c-w>h
nnoremap <space>j <c-w>j
nnoremap <space>k <c-w>k
nnoremap <space>l <c-w>l
nnoremap <space>H <c-w><
nnoremap <space>J <c-w>+
nnoremap <space>K <c-w>-
nnoremap <space>L <c-w>>

nnoremap <space>v <c-w>h
nnoremap <space>s <c-w>j
nnoremap <space>V <c-w>k
nnoremap <space>S <c-w>l
nnoremap <space><space>t :tabe<cr>
"}}}
"{{{ Tabs
noremap <silent> <space>] :tabnext<cr>
noremap <silent> <space>[ :tabNext<cr>
noremap <silent> <space>} :tabm +1<cr>
noremap <silent> <space>{ :tabm -1<cr>
noremap <space>1 1gt<cr>
noremap <space>2 2gt<cr>
noremap <space>3 3gt<cr>
noremap <space>4 4gt<cr>
noremap <space>5 5gt<cr>
noremap <space>6 6gt<cr>
noremap <space>7 7gt<cr>
noremap <space>8 8gt<cr>
noremap <space>9 9gt<cr>
noremap <space>0 10gt<cr>
"}}}
"{{{ Plugin binds
nnoremap <silent> <space>t :NERDTreeToggle<cr>
nnoremap <silent> <space>T :UndotreeToggle<cr>
nnoremap <silent> <space>Pi :PlugInstall<cr>
nnoremap <silent> <space>Pc :PlugClean<cr>
nnoremap <silent> <space>Pu :PlugUpdate<cr>
nnoremap <silent> <space>PU :PlugUpgrade<cr>
nnoremap <silent> <space>Ps :PlugStatus<cr>
nnoremap <silent> <space>r :silent! CocRestart<cr>
nnoremap <silent> <space>o :Tabularize<cr>
"}}}
"}}} MAPPINGS
"{{{ AUTOCMDS
"{{{ Display
augroup Display
    autocmd!
    autocmd BufWritePre * if get(g:, 'whitespacefix', 1) | :FixWhitespace

    " TeX stuff
    autocmd FileType tex let g:tex_no_error=1
    " 'texclear', when given *.tex, should remove all files generated as a
    "  result of calling CompTexRefMU
    " TODO comment the rest of this
    autocmd VimLeave *.tex !texclear %
    autocmd BufWritePre *.tex let g:tex_modified = &modified
    autocmd BufWritePost *.tex if get(g:, 'tex_modified', 0) | call CompTexRefMU()

    autocmd BufRead,BufNewFile Make.*,make.* set ft=make
    autocmd BufRead,BufNewFile *.Xcolor,*.xcolor set ft=xdefaults
    autocmd BufRead,BufNewFile *.conf,*.cfg set ft=conf
    autocmd BufRead,BufNewFile *.inc set ft=include | set syntax=sourcepawn
    autocmd BufRead,BufNewFile *.c,*.h,*.ck set ft=c
    autocmd BufRead,BufNewFile *.cpp,*.hpp,*.cxx,*.hxx,*.c++,*.h++ set ft=cpp
    " OpenGL shader files
    autocmd BufRead,BufNewFile *.vt,*.ft set ft=glsl
    autocmd BufRead,BufNewFile *.vth,*.fth,*.compute set ft=hlsl

    autocmd BufRead,BufNewFile *.todo,*.TODO,TODO,todo set ft=markdown
    " witcher script is an extension on typescript
    autocmd BufRead,BufNewFile *.ws set ft=typescript
    autocmd BufRead,BufNewFile grub,aliasrc,alias*,defines*,.bash* set ft=sh
    autocmd BufRead fonts.conf set ft=html

    " CS folding: http://vim.wikia.com/wiki/Syntax-based_folding, see comment by Ostrygen
    autocmd FileType cs,make set foldmethod=marker
                    \| set foldmarker={,}
    autocmd FileType cs set omnifunc=syntaxcomplete#Complete
                    \| set foldtext=substitute(getline(v:foldstart),'{.*','{...}',)
                    \| set foldlevelstart=2

    autocmd FileType vim setlocal foldmethod=marker
                    \| setlocal expandtab
    autocmd FileType c,h,cpp,hpp,diff,cs,python,sh,cfg,sp,inc,tex set nowrap
                    \| set nospell
                    \| set foldmethod=syntax
    autocmd FileType vim set nowrap
                    \| set nospell
    autocmd FileType c,h,cpp,hpp syn match comment "\v(^\s*//.*\n)+" fold
    " trailing whitespace has a purpose in markdown
    autocmd FileType markdown,html,diff,patch let g:whitespacefix=0
                    \| set tabstop=2
                    \| set expandtab
                    \| set spell
    autocmd FileType gitcommit set spell
                    \| set expandtab

    "continue where you left off
    autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
                \| exe "normal! g'\""
                \| endif

    " ???
    autocmd FileType glsl,hlsl set iskeyword=@,48-57,_,192-255
    autocmd FileType glsl,hlsl set nowrap
    autocmd BufEnter,WinEnter,WinNew,VimResized *,*.*
                \  let &scrolloff=winheight(win_getid())/2
    autocmd BufRead,BufNewFile *.vim set ft=vim
augroup END
"}}}
"{{{ Snippets
augroup Snippets
    autocmd!
"{{{ C-like
    "header guard                                    goto SOF     insert filename
    autocmd FileType c,cpp,glsl,hlsl,cs inoremap ;hg <esc>ggO<c-r>=expand("%:t")<cr><esc>hr_I#ifndef <esc>lv$h""yo#define <esc>""po<esc>Go<cr><esc>I#endif /* <esc>""pA */<esc>gg3ji
    "header guard but case is that of filename
    autocmd FileType c,cpp,glsl,hlsl,cs inoremap ;HG <esc>ggO<c-r>=expand("%:t")<cr><esc>hr_VUI#ifndef <esc>lv$h""yo#define <esc>""po<esc>Go<cr><esc>I#endif /* <esc>""pA */<esc>gg3ji
    "header include from current filename
    autocmd FileType c,cpp,glsl,hlsl,cs inoremap ;hi <esc>ggO<del><c-r>=expand("%:t")<cr><esc>I#include "<esc>$rhA"<cr><esc>o
    " automatically insert '/*  */' when '/**' is done
    autocmd FileType c,cpp,glsl,hlsl,cs inoremap /** /*<space><space>*/<esc>hhi
    " when '{<cr>', create a block. Any text after cursor when done will be
    " placed in block
    autocmd FileType c,cpp,glsl,hlsl,cs inoremap {<cr> <space><esc>DA{<cr>}<esc>O<space><esc>PA<bs><bs>
    autocmd FileType c,cpp,glsl,hlsl,cs inoremap [<cr> <space><esc>DA[<cr>]<esc>O<space><esc>PA<bs><bs>
    autocmd FileType c,cpp,glsl,hlsl,cs inoremap (<cr> <space><esc>DA(<cr>)<esc>O<space><esc>PA<bs><bs>
    autocmd FileType c,cpp,glsl,hlsl,cs inoremap /*<cr> <space><esc>DA/*<cr>*/<esc>O<space><esc>PA<bs><bs>

    autocmd FileType c,cpp,glsl,hlsl,cs inoremap {;<cr> <space><esc>DA{<cr>};<esc>O<space><esc>PA<bs><bs>
    autocmd FileType c,cpp,glsl,hlsl,cs inoremap [;<cr> <space><esc>DA[<cr>];<esc>O<space><esc>PA<bs><bs>
    autocmd FileType c,cpp,glsl,hlsl,cs inoremap (;<cr> <space><esc>DA(<cr>);<esc>O<space><esc>PA<bs><bs>

    autocmd FileType c,cpp,glsl,hlsl,cs inoremap <C-{> <esc>V:s/^\t\\|^ \{4\}//<cr>i

    autocmd FileType cs nnoremap <silent> <space>R :echo "Restarting OmniSharp Server" <bar> OmniSharpRestartServer <bar> echo "Server restarted"<cr>
    autocmd FileType cs nnoremap <silent> <space>P :OmniSharpHighlightEcho<cr>
"}}}
"{{{ HTML
    autocmd FileType html     inoremap <table> <table><cr></table><esc>O
    autocmd FileType markdown inoremap <table> <table><cr></table><esc>O<tab>
    autocmd FileType html     inoremap <thead> <thead><cr></thead><esc>O
    autocmd FileType markdown inoremap <thead> <thead><cr></thead><esc>O<tab>
    autocmd FileType html     inoremap <tbody> <tbody><cr></tbody><esc>O
    autocmd FileType markdown inoremap <tbody> <tbody><cr></tbody><esc>O<tab>
    autocmd FileType html     inoremap <tfoot> <tfoot><cr></tfoot><esc>O
    autocmd FileType markdown inoremap <tfoot> <tfoot><cr></tfoot><esc>O<tab>
"}}}
augroup END
"}}}
"{{{ Plugin Stuff
augroup pluginstuff
    autocmd!
    "open NERDTree automatically when vim starts up on opening a directory
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter *
                \| if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in")
                \| exe 'NERDTree' argv()[0]
                \| wincmd p
                \| ene
                \| endif
augroup END
"}}}
"}}} AUTOCMDS
"{{{ COLORS
" On default colorscheme:
"   8, 16, 256 the color order is NR-8, otherwise it's NR-16 (:help cterm-colors)
set t_Co=256
set t_ut=
" t_RB for auto light/dark background
"set t_RB=
set background=light
"colorscheme gruvbox
" Highlighting

highlight Comment      ctermfg=darkmagenta                      cterm=none
highlight String       ctermfg=darkyellow                       cterm=none
highlight Type         ctermfg=darkgreen
highlight StorageClass ctermfg=yellow                           cterm=bold,italic
highlight link Structure StorageClass
highlight Special                                               cterm=bold
highlight Identifier   ctermfg=red                              cterm=bold
highlight Function     ctermfg=blue                             cterm=bold
highlight Statement    ctermfg=darkcyan
highlight Conditional  ctermfg=darkcyan
highlight Repeat       ctermfg=darkcyan
highlight Label        ctermfg=blue
highlight Operator     ctermfg=darkcyan
highlight Keyword      ctermfg=darkcyan
highlight Todo         ctermfg=green        ctermbg=none        cterm=bold,italic
highlight PreProc      ctermfg=magenta
highlight Include      ctermfg=magenta
highlight Define       ctermfg=magenta                          cterm=bold
highlight Macro        ctermfg=red
highlight PreCond      ctermfg=darkred                          cterm=bold
highlight Character    ctermfg=yellow
highlight cTypedef     ctermfg=darkmagenta                      cterm=italic
highlight link cDefine Define
highlight link cMacro Macro
highlight link cPreCondit PreCond

highlight Search       ctermfg=black        ctermbg=darkyellow
highlight IncSearch                                             cterm=reverse
highlight VertSplit    ctermfg=black        ctermbg=white       cterm=none
highlight link StatusLine VertSplit
highlight link StatusLineNC VertSplit
highlight Normal                            ctermbg=none
highlight Visual       ctermfg=black        ctermbg=darkgrey
highlight SignColumn                        ctermbg=none
highlight CursorLine                        ctermbg=darkgrey        cterm=none
highlight CursorColumn                      ctermbg=darkgrey        cterm=none
highlight ColorColumn  ctermfg=none         ctermbg=black
highlight Folded       ctermfg=grey         ctermbg=none
highlight Pmenu        ctermfg=white        ctermbg=black       cterm=bold
highlight PmenuSel     ctermfg=white        ctermbg=darkgrey  cterm=bold
highlight LineNrAbove  ctermfg=darkgrey     ctermbg=none
highlight LineNr       ctermfg=grey         ctermbg=none        cterm=bold,italic
highlight LineNrBelow  ctermfg=darkgrey     ctermbg=none
highlight MatchParen   ctermfg=black        ctermbg=yellow
highlight TabLineFill  ctermfg=black        ctermbg=black       cterm=none
highlight TabLineSel   ctermfg=black        ctermbg=white       cterm=none
highlight TabLine      ctermfg=black        ctermbg=darkgrey    cterm=italic

highlight SpellBad      ctermfg=darkred ctermbg=black   cterm=italic
highlight SpellCap      ctermfg=blue    ctermbg=none    cterm=italic
highlight SpellRare     ctermfg=cyan    ctermbg=none    cterm=underline
highlight SpellLocal    ctermfg=blue    ctermbg=none    cterm=underline

highlight vimHighlight  ctermfg=darkyellow
highlight vimMap        ctermfg=yellow
highlight vimOption     ctermfg=blue                      cterm=bold
highlight vimVar        ctermfg=blue
highlight vimCommand    ctermfg=red
highlight vimIsCommand  ctermfg=yellow
highlight vimFunction   ctermfg=magenta                   cterm=italic
highlight link vimFuncName vimFunction
highlight vimHICTerm    ctermfg=green                     cterm=bold
highlight link vimHiCtermFgBg vimHICTerm
highlight vimHiGroup    ctermfg=darkcyan
highlight link vimGroup vimHiGroup
highlight vimHiAttrib   ctermfg=magenta
highlight link vimHiCtermColor vimHiAttrib
highlight link vimFgBgAttrib vimHiAttrib

highlight link cCommentStartError Comment

highlight DiffAdd           ctermfg=black   ctermbg=blue
highlight DiffChange        ctermfg=black   ctermbg=magenta
highlight DiffDelete        ctermfg=black   ctermbg=red
highlight DiffText          ctermfg=black   ctermbg=white

" Git Gutter
highlight GitGutterAdd      ctermfg=blue
highlight GitGutterChange   ctermfg=magenta
highlight GitGutterDelete   ctermfg=red
highlight GitGutterText     ctermfg=white

highlight link GitGutterAddLineNr           GitGutterAdd
highlight link GitGutterChangeLineNr        GitGutterChange
highlight link GitGutterDeleteLineNr        GitGutterDelete
highlight link GitGutterChangeDeleteLineNr  GitGutterChangeDelete

" Syntastic
highlight SyntasticError            ctermfg=red         ctermbg=black      cterm=bold
highlight SyntasticWarning                              ctermbg=none       cterm=none
highlight SyntasticStyleError                           ctermbg=none       cterm=none
highlight SyntasticStyleWarning                         ctermbg=none       cterm=none

highlight SyntasticErrorSign                            ctermbg=darkred
highlight SyntasticWarningSign      ctermfg=darkyellow
highlight SyntasticStyleErrorSign   ctermfg=darkcyan
highlight SyntasticStyleWarningSign                                        cterm=none

highlight SyntasticErrorLine        ctermfg=darkred                        cterm=none
highlight SyntasticWarningLine      ctermfg=none        ctermbg=none
highlight SyntasticStyleErrorLine   ctermfg=darkcyan
highlight SyntasticStyleWarningLine ctermfg=darkblue

" ALE
highlight link ALEError         SyntasticError
highlight link ALEWarning       SyntasticWarning
highlight link ALEStyleError    SyntasticStyleError
highlight link ALEStyleWarning  SyntasticStyleWarning

highlight link ALEErrorSign         SyntasticErrorSign
highlight link ALEWarningSign       SyntasticWarningSign
highlight link ALEStyleErrorSign    SyntasticStyleErrorSign
highlight link ALEStyleWarningSign  SyntasticStyleWarningSign

highlight link ALEErrorLine         SyntasticErrorLine
highlight link ALEWarningLine       SyntasticWarningLine
highlight link ALEStyleErrorLine    SyntasticStyleErrorLine
highlight link ALEStyleWarningLine  SyntasticStyleWarningLine

" Omnisharp
highlight csNamespace   ctermfg=yellow     cterm=italic
highlight csClass       ctermfg=green      cterm=italic
highlight csStruct      ctermfg=green
highlight csField       ctermfg=white
highlight csProp        ctermfg=cyan
highlight csMethod      ctermfg=yellow     cterm=bold
highlight csLocal                          cterm=italic
highlight csIdent       ctermfg=magenta
highlight csOperator    ctermfg=darkyellow cterm=bold
highlight csOverload    ctermfg=darkyellow cterm=bold
highlight csPunctuation ctermfg=darkyellow
highlight csKeyword     ctermfg=red        cterm=italic
highlight csControl                        cterm=italic
highlight csNumber      ctermfg=magenta
highlight csString      ctermfg=darkyellow

let g:OmniSharp_highlight_groups =
   \{
   \    'ClassName':            'csClass',
   \    'StructName':           'csStruct',
   \    'FieldName':            'csField',
   \    'LocalName':            'csLocal',
   \    'MethodName':           'csMethod',
   \    'PropertyName':         'csProp',
   \    'NamespaceName':        'csNamespace',
   \    'Identifier':           'csIdent',
   \    'Operator':             'csOperator',
   \    'OperatorOverloaded':   'csOverload',
   \    'Keyword':              'csKeyword',
   \    'ControlKeyword':       'csControl',
   \    'NumericLiteral':       'csNumber',
   \    'StringLiteral':        'csString',
   \    'Punctuation':          'csPunctuation',
   \}
"}}} COLORS
