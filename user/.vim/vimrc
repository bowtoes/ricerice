"{{{PLUGINS
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
"{{{ALE Config
let g:ale_linters = {
\ 'c':['clangd'],
\ 'cs':['OmniSharp'],
\ 'python':['flake8'],
\ 'html':[''],
\}
let g:ale_python_flake8_options = '--jobs 8 --ignore
      \ F401,F403,
      \ E111,E114,E115,E116,E117,E121,E122,E123,E124,E125,E126,E127,E128,E129,E131,
      \ E132,E133,
      \ E201,E202,E203,E211,E221,E222,E223,E224,E225,E226,E227,E228,E231,E241,E242,
      \ E251,E261,E262,E265,E266,E271,E272,E273,E274,E275,
      \ E301,E302,E303,E304,E305,E306,
      \ E401,E402,
      \ E501,
      \ E701,E702,E703,E704,E722,E731,E741,E742,E743,
      \ W291,W292,W293,
      \ W391,
      \ W503,W504,W505'
let g:ale_lint_on_text_changed=1
let g:ale_lint_on_instert_leave=1
let g:ale_lint_on_enter=1
let g:ale_lint_on_save=1
let g:ale_lint_on_filetype_changed=1
let g:ale_lint_delay=0

let g:ale_close_preview_on_insert=1

let g:ale_popup_preview=1
let g:ale_hover_cursor=0
let g:ale_hover_format='popup'
let g:ale_detail_format=''
let g:ale_cursor_detail=1
let g:ale_echo_cursor=0
let g:ale_echo_delay=0

let g:ale_completion_enabled=0
" When this is 1, massive slowdown when doing it.
let g:ale_completion_autoimport=0
let g:ale_completion_delay=0
let g:ale_sign_error = '!!'
let g:ale_sign_warning = '??'
let g:ale_sign_style_error = '!'
let g:ale_sign_style_warning = '?'
"}}}
call plug#begin('~/.vim/plugged')
"{{{SYNTAX
"Plug 'dense-analysis/ale'
Plug '~/.vim/plugged/ale-custom'
Plug 'OmniSharp/omnisharp-vim'
Plug 'FooSoft/vim-argwrap'

Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'deoplete-plugins/deoplete-tag'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'ludovicchabant/vim-gutentags'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-easytags'
"Plug 'sheerun/vim-polyglot'
"}}}SYNTAX
"{{{MISC
Plug 'godlygeek/tabular'
Plug 'bronson/vim-trailing-whitespace'
Plug 'preservim/nerdtree'
Plug 'dsimidzija/vim-nerdtree-ignore'
Plug 'mbbill/undotree'
Plug 'itchyny/lightline.vim'
"}}}
call plug#end()
"}}}PLUGINS
"{{{PLUGIN CONFIG
"{{{OmniSharp
  let g:OmniSharp_highlighting=3
  let g:OmniSharp_server_stdio_quickload=1
"}}}OmniSharp
"{{{deoplete
  let g:deoplete#enable_at_startup=1
  call deoplete#custom#option({
  \ 'auto_complete': v:true,
  \ 'auto_complete_delay': 0,
  \ 'auto_complete_popup': 'auto',
  \ 'num_processes': 8,
  \ 'sources': {
    \ '_': [],
    \ 'c': ['tag', 'ale'],
    \ 'cs': ['omnisharp'],
    \ 'html': [],
    \ },
  \ })
"}}}deoplete
"{{{gutentags
let g:gutentags_enabled = 1
let g:gutentags_ctags_extra_args = [ '--fields=+liaSszt', '--exclude=docs', '--exclude=Documentation', '--c-kinds=+p', '--c++-kinds=+p' ]
let g:gutentags_generate_on_missing = 0
let g:gutentags_generate_on_write = 0
"}}}gutentags
"{{{easytags
let g:easytags_async = 1
let g:easytags_dynamic_files = 1
let g:easytags_always_enabled = 0
let g:easytags_on_cursorhold = 0
let g:easytags_auto_update = 0
let g:easytags_auto_highlight = 0
let g:easytags_autorecurse = 0
let g:easytags_evenets = ['']
"}}}easytags
"{{{Undotree
let g:undotree_WindowLayout=2
let g:undotree_SplitWidth=40
let g:undotree_DiffpanelHeight=10
let g:undotree_SetFocusWhenToggle=1
let g:undotree_RelativeTimestamp=0
"}}}
"{{{Argwrap
nnoremap sj :ArgWrap<CR>
"let g:argwrap_tail_comma=1
let g:argwrap_tail_comma_braces='{['
"}}}
"{{{Misc
" NERDTree
let NERDTreeIgnore = ['\.meta','\.o']
" Vimtex
let g:tex_flavor = 'latex'
let g:vimtex_compiler_enabled = 0

" Vim-Checklist
noremap <space>V :ChecklistToggleCheckbox<cr>

" FixWhitespace
let g:extra_whitespace_ignored_filetypes = ['diff', 'patch']
let g:lsp_cxx_hl_use_text_props = 1 " the fuck is this?
"}}}
"}}}PLUGIN CONFIG
"{{{FUNCTIONS
function! GetCursorChar()
  return char2nr(matchstr(getline('.'), '\%' . col('.') . 'c.'))
endfunction

function! SilentExec(cmd)
  let cmd = substitute(a:cmd, '^!', '', '')
  let cmd = substitute(cmd, '%', shellescape(expand('%')), '')
  call system(cmd)
endfunction

function! CompTexRefMU()
  call SilentExec('compiler %')
  if get(g:, 'mupdf_open', 0)
    call SilentExec('pkill --signal HUP mupdf')
  else
    let l:pdff = expand('%:r').'.pdf'
    if filereadable(l:pdff)
      silent !mupdf %:r.pdf & disown
      let g:mupdf_open = 1
    endif
  endif
endfunction

function! OnOff(status)
  return a:status ? 'on' : 'off'
endfunction

function! CustomFolder()
  let l:base=foldtext()
  let l:sub=substitute(l:base, '{.*', '{...}', 'g')
  return l:sub
endfunction
"}}}FUNCTIONS
"{{{VIM CONFIG
syntax enable
filetype plugin indent on
let mapleader=' '
set pastetoggle=<F2>
set nocompatible
set encoding=UTF-8
set exrc
set secure
set number
set nohidden
set ttyfast
set laststatus=2
set noshowmode
set showcmd
set sessionoptions=buffers,curdir,folds,tabpages
"commandmode autocomplete
set wildmode=longest,list,full
set wildmenu
"create a backup file
set writebackup
"do not delete backup file
set backup
set undofile
set undolevels=1000
set undoreload=0
set swapfile

set updatetime=300
set signcolumn=number
set colorcolumn=80
set nowrap
set linebreak
set breakindent
set textwidth=0
""" indenting and tabs
set tabstop=4
"defaults to tabstop when 0
set shiftwidth=0
set softtabstop=0
set shiftround
set noexpandtab
set autoindent
set smartindent

set listchars=tab:→\ \ ,space:·,eol:~,extends:>,precedes:⏗,trail:¬
set fillchars=vert:\ ,fold:\ ,stl:\ ,stlnc:\ ,eob:\ 
set scrolloff=3
"modified default
set shortmess=inxtoO
set shortmess+=cwmsI
set completeopt-=preview
set completeopt+=popup,noinsert
"don't do folds when opening a file (doesn't disable fold feature)
set nofoldenable
set foldnestmax=1
set foldmethod=marker
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch

" C indenting
set cino+=Ls,l1,E-s,(s
"}}}GENERAL CONFIG
"{{{AUTOCMDS
"{{{Plugins
augroup Plugins
  autocmd!
"{{{ALE
  autocmd User ALECompletePost ALEHover
  autocmd BufReadPost config.h ALEDisableBuffer
"}}}
  autocmd User GutentagsUpdated if exists(':HighlightTags') | HighlightTags | endif
"{{{NERDTree
  "open NERDTree automatically when vim starts up on opening a directory
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter *
        \| if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in")
        \| exe 'NERDTree' argv()[0]
        \| wincmd p
        \| ene
        \| endif
"}}}NERDTree
augroup END
"}}}Plugins
"{{{FT choosing
augroup FT_choose
  autocmd!
  autocmd BufRead,BufNewFile Make.*,make.* set ft=make
  autocmd BufRead,BufNewFile *.Xcolor,*.xcolor set ft=xdefaults

  autocmd BufRead,BufNewFile *.conf,*.cfg set ft=conf
  autocmd BufRead,BufNewFile *.inc set ft=include | set syntax=sourcepawn

  autocmd BufRead,BufNewFile *.c,*.h,*.ck set ft=c
  autocmd BufRead,BufNewFile *.cpp,*.hpp,*.cxx,*.hxx,*.c++,*.h++ set ft=cpp

  " OpenGL shader files
  autocmd BufRead,BufNewFile *.vt,*.ft set ft=glsl
  autocmd BufRead,BufNewFile *.vth,*.fth,*.compute set ft=hlsl

  autocmd BufRead,BufNewFile *.todo,*.TODO,TODO,todo set ft=markdown
  autocmd BufRead,BufNewFile *.vim set ft=vim

  " witcher script is an extension on typescript
  autocmd BufRead,BufNewFile *.ws set ft=typescript

  autocmd BufRead,BufNewFile grub,aliasrc,alias*,defines*,.bash* set ft=sh
  autocmd BufRead fonts.conf set ft=html
augroup END
"}}} FT detection
"{{{Display
augroup Display
  autocmd!
  autocmd BufWritePre * if get(g:, 'whitespacefix', 1) | :FixWhitespace
  autocmd BufEnter,WinEnter,WinNew,VimResized *,*.*
        \ let &scrolloff=winheight(win_getid())/2
  "continue where you left off
  autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g'\""
        \| endif
"{{{TEX stuff
  autocmd FileType tex let g:tex_no_error=1
  " 'texclear', when given *.tex, should remove all files generated as a
  "  result of calling CompTexRefMU
  " TODO comment the rest of this
  autocmd VimLeave *.tex !texclear %
  autocmd BufWritePre *.tex let g:tex_modified = &modified
  autocmd BufWritePost *.tex if get(g:, 'tex_modified', 0) | call CompTexRefMU()
"}}}TEX stuff
augroup END
"}}}Display
"{{{Filetype Settings
augroup FiletypeSettings
  autocmd!
"{{{C
  autocmd FileType c syn match comment "\v(^\s*//.*\n)+" fold
  autocmd FileType c setlocal foldmethod=syntax | setlocal nospell | setlocal nowrap
  autocmd FileType c syntax match StorageClass /restrict/
  "autocmd FileType c setlocal omnifunc=ale#completion#OmniFunc
"}}}C
"{{{c but it sucks
  autocmd FileType cpp syn match comment "\v(^\s*//.*\n)+" fold
  autocmd FileType cpp setlocal foldmethod=syntax | setlocal nospell | setlocal nowrap
"}}}c but it sucks
"{{{CS
  let s:is_cs=0
  autocmd FileType cs syn match comment "\v(^\s*//.*\n)+" fold
  autocmd FileType cs setlocal foldmethod=syntax | setlocal foldnestmax=3
  autocmd FileType cs setlocal foldtext=CustomFolder()
  " useful for folding, but what else is affected?
  autocmd FileType cs setlocal syntax=cpp
  autocmd FileType cs setlocal nowrap | setlocal nospell
  autocmd FileType cs let s:is_cs=1
"}}}CS
"{{{PYTHON
  autocmd FileType python setlocal noexpandtab | setlocal shiftwidth=0
  autocmd FileType python setlocal nowrap | setlocal nospell | setlocal foldmethod=syntax
  autocmd FileType python let g:pyindent_disable_parentheses_indenting=0
"}}}PYTHON
"{{{SH
  autocmd FileType sh setlocal list | setlocal nowrap | setlocal nospell | setlocal foldmethod=syntax
"}}}SH
"{{{MAKE
  autocmd FileType make setlocal foldmethod=marker | setlocal foldmarker={,}
"}}}MAKE
"{{{VIM
  autocmd FileType vim setlocal foldmethod=marker | setlocal expandtab
  autocmd FileType vim setlocal tabstop=2 | setlocal softtabstop=2 | setlocal shiftwidth=0 | setlocal nospell | setlocal nowrap
"}}}VIM
"{{{DIFF
  autocmd FileType diff setlocal expandtab | setlocal tabstop=2 | setlocal softtabstop=2 | setlocal shiftwidth=0 | setlocal nowrap | setlocal nospell
  autocmd FileType diff setlocal foldmethod=syntax
  autocmd FileType diff let g:whitespacefix=0
"}}}DIFF
"{{{GITCOMMIT
  autocmd FileType gitcommit setlocal expandtab | setlocal tabstop=2 | setlocal softtabstop=2 | setlocal shiftwidth=0
  autocmd FileType gitcommit setlocal spell
"}}}GITCOMMIT
"{{{PATCH
  autocmd FileType patch setlocal expandtab | setlocal tabstop=2 | setlocal softtabstop=2 | setlocal shiftwidth=0
  autocmd FileType patch setlocal spell
  autocmd FileType patch let g:whitespacefix=0
"}}}PATCH
"{{{MARKDOWN
  autocmd FileType markdown setlocal expandtab | setlocal tabstop=2 | setlocal softtabstop=2 | setlocal shiftwidth=0 | setlocal spell
  autocmd FileType markdown setlocal textwidth=79
  autocmd FileType markdown setlocal complete+=kspell
  autocmd FileType markdown let g:whitespacefix=0
"}}}MARKDOWN
"{{{HTML
  autocmd FileType html setlocal expandtab | setlocal tabstop=2 | setlocal softtabstop=2 | setlocal shiftwidth=0
  autocmd FileType html ALEDisableBuffer | call deoplete#disable()
  autocmd FileType html setlocal complete+=kspell
  autocmd FileType html setlocal indentkeys=
"}}}HTML
"{{{XML
  autocmd FileType xml setlocal expandtab | setlocal tabstop=2 | setlocal softtabstop=2 | setlocal shiftwidth=0
  autocmd FileType xml setlocal complete+=kspell
"}}}XML
"{{{G/HLSL
  autocmd FileType glsl,hlsl setlocal nowrap | setlocal iskeyword=@,48-57,_,192-255 " ???
"}}}G/HLSL
"{{{TEXT
  autocmd FileType text setlocal spell
  autocmd FileType text setlocal complete+=kspell
"}}}TEXT
"{{{TEX
  autocmd FileType tex setlocal nowrap | setlocal nospell | setlocal foldmethod=syntax
"}}}TEX
"{{{MISC
  autocmd FileType cfg setlocal nowrap | setlocal nospell | setlocal foldmethod=syntax
  autocmd FileType sp setlocal nowrap | setlocal nospell | setlocal foldmethod=syntax
  autocmd FileType inc setlocal nowrap | setlocal nospell | setlocal foldmethod=syntax
  autocmd FileType msbuild setlocal nowrap | setlocal nospell | setlocal expandtab | setlocal tabstop=2 | setlocal softtabstop=2 | setlocal shiftwidth=0
"}}}MISC
augroup END
"}}}Filetype Settings
"{{{Snippets
augroup Snippets
  autocmd!
"{{{C-like
  "header guard                  goto SOF   insert filename
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap ;hg <esc>ggO<c-r>=expand("%:t")<cr><esc>hr_I#ifndef <esc>lv$h""yo#define <esc>""po<esc>Go<cr><esc>I#endif /* <esc>""pA */<esc>gg3ji
  "header guard but case is that of filename
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap ;HG <esc>ggO<c-r>=expand("%:t")<cr><esc>hr_VUI#ifndef <esc>lv$h""yo#define <esc>""po<esc>Go<cr><esc>I#endif /* <esc>""pA */<esc>gg3ji
  "header include from current filename
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap ;hi <esc>ggO<del><c-r>=expand("%:t")<cr><esc>I#include "<esc>$rhA"<cr><esc>o
  " automatically insert '/*  */' when '/**' is done
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap /** **/<esc>hhi/<esc>lli<space><space><esc>i
  " when '{<cr>', create a block. Any text after cursor when done will be
  " placed in block
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap {<cr> }<esc>i{<cr><esc>O
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap [<cr> ]<esc>i[<cr><esc>O
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap (<cr> )<esc>i(<cr><esc>O
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap /*<cr> <space><esc>DA/*<cr>*/<esc>O<space><esc>PA<bs><bs>

  autocmd FileType c,cpp,glsl,hlsl,cs inoremap {;<cr> };<esc>hi{<cr><esc>O
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap [;<cr> ];<esc>hi[<cr><esc>O
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap (;<cr> );<esc>hi(<cr><esc>O

  autocmd FileType c,cpp,glsl,hlsl,cs inoremap <C-{> <esc>V:s/^\t\\|^ \{4\}//<cr>i
"}}}
"{{{C#
  autocmd FileType cs nnoremap <silent> <space>R :echo "Restarting OmniSharp Server" <bar> OmniSharpRestartServer <bar> echo "Server restarted"<cr>
  autocmd FileType cs nnoremap <silent> <space>P :OmniSharpHighlightEcho<cr>
"}}}
"{{{XML
  autocmd FileType xml inoremap <?xml> <?xml version="1.0" encoding="utf-8"?>
"}}}XML
augroup END
"}}}Snippets
"}}}AUTOCMDS
"{{{MAPPINGS
"{{{Plugins
nnoremap <silent> <space>t :NERDTreeToggle<cr>
nnoremap <silent> <space>T :UndotreeToggle<cr>

nnoremap <silent> <space>O :GutentagsUpdate<cr>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif &filetype==?'cs' && exists('g:OmniSharp_loaded') && g:OmniSharp_loaded
      execute 'OmniSharpDocumentation'
  elseif exists('g:loaded_ale') && g:loaded_ale
    execute 'ALEHover'
  else
    execute '!' . &keywordprg . ' ' . expand('<cword>')
  endif
endfunction
nnoremap <silent> K :call <SID>show_documentation()<CR>

" use <tab> to navigate complete items
inoremap <silent><expr> <tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <silent><expr> <s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
inoremap <silent><expr> <cr> pumvisible() ? deoplete#close_popup() : "\<cr>"

"{{{ALE Motions
nnoremap <silent> [g :ALEPrevious -nostyle
nnoremap <silent> [e :ALEPrevious -nostyle -error
nnoremap <silent> [w :ALEPrevious -nostyle -warning
nnoremap <silent> [i :ALEPrevious -nostyle -info
nnoremap <silent> [b :ALEPrevious -style
nnoremap <silent> [d :ALEPrevious -style -error
nnoremap <silent> [s :ALEPrevious -style -warning
nnoremap <silent> [k :ALEPrevious -style -info
nnoremap <silent> ]g :ALENext -nostyle
nnoremap <silent> ]e :ALENext -nostyle -error
nnoremap <silent> ]w :ALENext -nostyle -warning
nnoremap <silent> ]i :ALENext -nostyle -info
nnoremap <silent> ]b :ALENext -style
nnoremap <silent> ]d :ALENext -style -error
nnoremap <silent> ]s :ALENext -style -warning
nnoremap <silent> ]k :ALENext -style -info
nnoremap <silent> [G :ALEPrevious -wrap -nostyle
nnoremap <silent> [E :ALEPrevious -wrap -nostyle -error
nnoremap <silent> [W :ALEPrevious -wrap -nostyle -warning
nnoremap <silent> [I :ALEPrevious -wrap -nostyle -info
nnoremap <silent> [B :ALEPrevious -wrap -style
nnoremap <silent> [D :ALEPrevious -wrap -style -error
nnoremap <silent> [S :ALEPrevious -wrap -style -warning
nnoremap <silent> [K :ALEPrevious -wrap -style -info
nnoremap <silent> ]G :ALENext -wrap -nostyle
nnoremap <silent> ]E :ALENext -wrap -nostyle -error
nnoremap <silent> ]W :ALENext -wrap -nostyle -warning
nnoremap <silent> ]I :ALENext -wrap -nostyle -info
nnoremap <silent> ]B :ALENext -wrap -style
nnoremap <silent> ]D :ALENext -wrap -style -error
nnoremap <silent> ]S :ALENext -wrap -style -warning
nnoremap <silent> ]K :ALENext -wrap -style -info
"}}}ALE Motions

" GoTo code navigation.
nnoremap <silent> gd :ALEGoToDefinition<cr>
nnoremap <silent> gy :ALEGoToTypeDefinition<cr>
"}}}Plugins
"{{{Files
" Close all but current buffer
nnoremap <silent> mbo  :%bd <bar> e# <bar> bd#<cr>

nnoremap <space>w :w<cr>
nnoremap <space>W :w!<cr>
nnoremap <space>q :q<cr>
nnoremap <space>Q :q!<cr>
nnoremap Q :echo "It's '\<space\>Q' milord!"<cr>
nnoremap <space>e :e<cr>
nnoremap <space>E :e!<cr>
nnoremap <space><C-e> :E<cr>

nnoremap <silent> <space><space>c :lcd %:p:h<bar>:pwd<cr>
nnoremap <silent> <space><space>u :lcd %:p:h:h<bar>:pwd<cr>

"nnoremap <space>O :UpdateTypesFile<cr>
"}}}Files
"{{{Folds
nnoremap <silent> ga za
nnoremap <silent> gA zA
nnoremap <silent> gz @=(&foldlevel?'zm':'zR')<CR>
nnoremap <silent> gZ @=(&foldlevel?'zM':'zR')<CR>
"}}}Folds
"{{{Toggles
noremap <silent> <space>p :setlocal spell! <bar> echo "Spellcheck " . OnOff(&spell)<CR>
noremap <silent> <space>g :set wrap! <bar> echo "Linewrap " . OnOff(&wrap)<CR>
noremap <silent> <space><tab> :setlocal expandtab! <bar> echo "Expandtab " . OnOff(&expandtab)<CR>
noremap <silent> <space>c :set cursorline! <bar> echo "Cursorline "  . OnOff(&cursorline)<CR>
noremap <silent> <space>C :set cursorcolumn! <bar> echo "Cursorcolumn "  . OnOff(&cursorcolumn)<CR>
noremap <silent> <space>i :set list! <bar> echo "Whitespace " . OnOff(&list)<CR>
noremap <silent> <F1> :let g:whitespacefix = !get(g:, 'whitespacefix', 1)
      \ <bar> echo "Whitespace fix " . OnOff(get(g:, 'whitespacefix', 1))<CR>
"}}}Toggles
"{{{Lines
nnoremap <c-j> mZddp`Zj
nnoremap <c-k> mZddkP`Z2k
nnoremap <c-c> mZyyp`Zj
inoremap <c-c> <esc>mZyyp`Zjli
"}}}Lines
"{{{Windows
nnoremap <space>h <c-w>h
nnoremap <space>j <c-w>j
nnoremap <space>k <c-w>k
nnoremap <space>l <c-w>l
nnoremap <space>H <c-w><
nnoremap <space>J <c-w>+
nnoremap <space>K <c-w>-
nnoremap <space>L <c-w>>
"}}}Windows
"{{{Tabs
nnoremap <space><space>t :tabe<space>
noremap <silent> <space>] :tabnext<cr>
noremap <silent> <space>[ :tabNext<cr>
noremap <silent> <space>} :tabm +1<cr>
noremap <silent> <space>{ :tabm -1<cr>
noremap <space>1 1gt<cr>
noremap <space>2 2gt<cr>
noremap <space>3 3gt<cr>
noremap <space>4 4gt<cr>
noremap <space>5 5gt<cr>
noremap <space>6 6gt<cr>
noremap <space>7 7gt<cr>
noremap <space>8 8gt<cr>
noremap <space>9 9gt<cr>
noremap <space>0 10gt<cr>
"}}}Tabs
"{{{Misc
"clear search string
nnoremap <silent> <space>/ :let @/=""<CR>
nnoremap <F2> :set invpaste paste?<CR>
"view next/previous file
nnoremap <silent> <space>n :next<cr>
nnoremap <silent> <space>N :previous<cr>

noremap <F3> :call EchoSyntaxInfo(line("."), col("."))<CR>
noremap <F4> :call EchoStyleInfo(line("."), col("."))<CR>

"I hate it when I try to push shift+<something else> after moving.
nnoremap L l
nnoremap H h
"}}}Misc
"}}}MAPPINGS
"{{{COLORS
" On default colorscheme:
"   8, 16, 256 the color order is NR-8, otherwise it's NR-16 (:help cterm-colors)
set t_Co=256
set t_ut=
set background=light
"{{{Defaults
highlight Comment ctermfg=darkmagenta cterm=none
highlight String ctermfg=darkyellow cterm=none
highlight Type ctermfg=darkgreen
highlight StorageClass ctermfg=yellow cterm=bold,italic
highlight link Structure StorageClass
highlight Special cterm=bold
highlight Identifier ctermfg=red cterm=bold
highlight Function ctermfg=blue cterm=bold
highlight Statement ctermfg=darkcyan
highlight Conditional ctermfg=darkcyan
highlight Repeat ctermfg=darkcyan
highlight Operator ctermfg=darkcyan
highlight Keyword ctermfg=darkcyan
highlight Label ctermfg=blue
highlight Todo ctermfg=green ctermbg=none cterm=bold,underline
highlight PreProc ctermfg=magenta
highlight Include ctermfg=magenta
highlight Define ctermfg=magenta cterm=bold
highlight Macro ctermfg=red
highlight PreCond ctermfg=darkred cterm=bold
highlight Character ctermfg=yellow
"}}}Defaults
"{{{C
highlight cTypedef ctermfg=darkmagenta cterm=italic
highlight link cDefine Define
highlight link cMacro Macro
highlight link cPreCondit PreCond
highlight link cCommentStartError Comment

highlight link CTagsDefinedName Macro
highlight CTagsConstant ctermfg=lightred

highlight link CTagsEnumeratorName Type
highlight CTagsEnumerationValue ctermfg=magenta

highlight CTagsExtern ctermfg=red
highlight link CTagsFile CTagsExtern

highlight CTagsNamespace ctermfg=darkblue
highlight link CTagsGlobalVariable NONE
highlight link CTagsType Type
highlight link CTagsUnion Type
highlight link CTagsStructure Type
highlight link CTagsMember CTagsGlobalVariable
highlight link CTagsFunction Function
highlight link CTagsLocalVariable CTagsGlobalVariable
"}}}C
"{{{Vim
highlight Search ctermfg=black ctermbg=darkyellow
highlight IncSearch cterm=reverse
highlight VertSplit ctermfg=black ctermbg=white cterm=none
highlight link StatusLine VertSplit
highlight link StatusLineNC VertSplit
highlight Normal ctermbg=none
highlight Visual ctermfg=black ctermbg=darkgrey
highlight SignColumn ctermbg=none
highlight CursorLine ctermbg=darkgrey cterm=none
highlight CursorColumn ctermbg=darkgrey cterm=none
highlight ColorColumn ctermfg=none ctermbg=black
highlight Folded ctermfg=grey ctermbg=none
highlight Pmenu ctermfg=white ctermbg=black cterm=bold
highlight PmenuSel ctermfg=white ctermbg=darkgrey cterm=bold
highlight LineNrAbove ctermfg=darkgrey ctermbg=none
highlight LineNr ctermfg=grey ctermbg=none cterm=bold,italic
highlight LineNrBelow ctermfg=darkgrey ctermbg=none
highlight MatchParen ctermfg=black ctermbg=yellow
highlight TabLineFill ctermfg=black ctermbg=black cterm=none
highlight TabLineSel ctermfg=black ctermbg=white cterm=none
highlight TabLine ctermfg=black ctermbg=darkgrey cterm=italic

highlight SpellBad ctermfg=darkred ctermbg=black cterm=italic
highlight SpellCap ctermfg=blue ctermbg=none cterm=italic
highlight SpellRare ctermfg=cyan ctermbg=none cterm=underline
highlight SpellLocal ctermfg=blue ctermbg=none cterm=underline

highlight vimHighlight ctermfg=darkyellow
highlight vimMap ctermfg=yellow
highlight vimOption ctermfg=blue cterm=bold
highlight vimVar ctermfg=blue
highlight vimCommand ctermfg=red
highlight vimIsCommand ctermfg=yellow
highlight vimFunction ctermfg=magenta cterm=italic
highlight link vimFuncName vimFunction
highlight vimHICTerm ctermfg=green cterm=bold
highlight link vimHiCtermFgBg vimHICTerm
highlight vimHiGroup ctermfg=darkcyan
highlight link vimGroup vimHiGroup
highlight vimHiAttrib ctermfg=magenta
highlight link vimNotation vimHiAttrib
highlight link vimHiCtermColor vimHiAttrib
highlight link vimFgBgAttrib vimHiAttrib

highlight DiffAdd ctermfg=black ctermbg=blue
highlight DiffChange ctermfg=black ctermbg=magenta
highlight DiffDelete ctermfg=black ctermbg=red
highlight DiffText ctermfg=black ctermbg=white
"}}}Vim
"{{{Git Gutter
highlight GitGutterAdd ctermfg=blue
highlight GitGutterChange ctermfg=magenta
highlight GitGutterDelete ctermfg=red
highlight GitGutterText ctermfg=white

highlight link GitGutterAddLineNr GitGutterAdd
highlight link GitGutterChangeLineNr GitGutterChange
highlight link GitGutterDeleteLineNr GitGutterDelete
highlight link GitGutterChangeDeleteLineNr GitGutterChangeDelete
"}}}Git Gutter
"{{{Syntastic
highlight SyntasticError ctermfg=red ctermbg=black cterm=bold
highlight SyntasticWarning ctermbg=none cterm=none
highlight SyntasticStyleError ctermbg=none cterm=none
highlight SyntasticStyleWarning ctermbg=none cterm=none

highlight SyntasticErrorSign ctermbg=darkred
highlight SyntasticWarningSign ctermfg=darkyellow
highlight SyntasticStyleErrorSign ctermfg=darkcyan
highlight SyntasticStyleWarningSign cterm=none

highlight SyntasticErrorLine ctermfg=darkred cterm=none
highlight SyntasticWarningLine ctermfg=none ctermbg=none
highlight SyntasticStyleErrorLine ctermfg=darkcyan
highlight SyntasticStyleWarningLine ctermfg=darkblue
"}}}Syntastic
"{{{ALE
highlight link ALEError SyntasticError
highlight link ALEWarning SyntasticWarning
highlight link ALEStyleError SyntasticStyleError
highlight link ALEStyleWarning SyntasticStyleWarning

highlight link ALEErrorSign SyntasticErrorSign
highlight link ALEWarningSign SyntasticWarningSign
highlight link ALEStyleErrorSign SyntasticStyleErrorSign
highlight link ALEStyleWarningSign SyntasticStyleWarningSign

highlight link ALEErrorLine SyntasticErrorLine
highlight link ALEWarningLine SyntasticWarningLine
highlight link ALEStyleErrorLine SyntasticStyleErrorLine
highlight link ALEStyleWarningLine SyntasticStyleWarningLine
"}}}ALE
"{{{OmniSharp
"highlight link csNamespace Macro
"highlight link csClassType CTagsStructure
"highlight link csClass StorageClass
"highlight link csStruct CTagsStructure
"highlight link csField CTagsMember
"highlight link csProp CTagsMember
"highlight link csMethod Function
"highlight link csLocal NONE
"highlight csIdent NONE
"highlight link csOperator Operator
"highlight csOverload ctermfg=darkyellow cterm=bold
"highlight csPunctuation ctermfg=darkyellow
"highlight link csKeyword Keyword
"highlight link csControl Conditional
"highlight link csNumber cNumber
"highlight link csString String
"old
highlight csPunctuation ctermfg=brown cterm=bold
"Roslyn thinks things that aren't keywords are keywords and it's annoying.
"Things like 'int', 'string', 'false', 'true'. Keywords? Huh?
highlight csKeyword ctermfg=magenta
highlight link csControl Keyword

highlight link csNumber Number
highlight link csString String
highlight link csConstant CTagsConstant

highlight csNamespace ctermfg=darkblue
highlight link csIdent CTagsGlobalVariable
highlight csClass ctermfg=darkgreen
highlight link csStruct CTagsStructure
highlight csInterface ctermfg=lightgreen
highlight csEnum ctermfg=lightblue
highlight link csEnumMember CTagsEnumerationValue

highlight csField ctermfg=lightcyan
highlight csProp ctermfg=cyan

highlight csMethod ctermfg=lightmagenta
highlight link csExtendMethod csMethod
highlight csParam ctermfg=white
highlight csLocal ctermfg=white

highlight csDelegate ctermfg=red

highlight link csOperator Operator
highlight csOverloadOp ctermfg=magenta cterm=bold


let g:OmniSharp_highlight_groups =
   \{
   \  'Punctuation':        'csPunctuation',
   \  'Keyword':            'csKeyword',
   \  'ControlKeyword':     'csControl',
   \  'NumericLiteral':     'csNumber',
   \  'StringLiteral':      'csString',
   \  'ConstantName':       'csConstant',
   \  'NamespaceName':      'csNamespace',
   \  'Identifier':         'csIdent',
   \  'ClassName':          'csClass',
   \  'StructName':         'csStruct',
   \  'InterfaceName':      'csInterface',
   \  'EnumName':           'csEnum',
   \  'EnumMemberName':     'csEnumMember',
   \  'FieldName':          'csField',
   \  'PropertyName':       'csProp',
   \  'MethodName':         'csMethod',
   \  'ExtensionMethodName':'csExtendMethod',
   \  'ParameterName':      'csParam',
   \  'LocalName':          'csLocal',
   \  'DelegateName':       'csDelegate',
   \  'Operator':           'csOperator',
   \  'OperatorOverloaded': 'csOverloadOp',
   \}
"}}}OmniSharp
"}}}COLORS
