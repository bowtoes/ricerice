"""" TODO TODO TODO """"
" Clean this whole thing up, reorganize, simplify, and make it more focused
" This is really slow
" TRIM OUT THE FAT - GlaDOS

"""" ++++ PLUGINS ++++
" Install Vim-Plug if it isn't already
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" TRIM OUT THE FAT - GlaDOS
call plug#begin('~/.vim/plugged')
" Easytags seems to be the only plugin I've found to do what I want,
" that being extra type highlighting (say typedefs in C) without cluttering
" my filesystem or git projects with unnecessary tags files all over the
" place. Though it seems to be outdated, and a patch needs to be applied for
" it to work with Universal CTags:
" https://github.com/xolox/vim-easytags/pull/133#issuecomment-316477649
Plug 'scrooloose/nerdcommenter' " I despise vimscript with a passion
Plug 'scrooloose/syntastic'
Plug 'valloric/youcompleteme'
Plug 'preservim/nerdtree'
Plug 'xolox/vim-easytags'
Plug 'xolox/vim-misc'
Plug 'majutsushi/tagbar'
Plug 'itchyny/lightline.vim'
Plug 'mbbill/undotree'
Plug 'pseewald/vim-anyfold'
Plug 'airblade/vim-gitgutter'
Plug 'bronson/vim-trailing-whitespace'
Plug 'lervag/vimtex'

" Syntax Highlighting
Plug 'gisphm/vim-gitignore'
Plug 'rpdelaney/vim-sourcecfg'
Plug 'tikhomirov/vim-glsl'
Plug 'withgod/vim-sourcepawn'
call plug#end()
"""" ---- PLUGINS ----

"""" ++++ FUNCTIONS ++++
function! GetCursorChar()
    return char2nr(matchstr(getline('.'), '\%' . col('.') . 'c.'))
endfunction

function! SilentExec(cmd)
    let cmd = substitute(a:cmd, '^!', '', '')
    let cmd = substitute(cmd, '%', shellescape(expand('%')), '')
    call system(cmd)
endfunction

function! CompTexRefMU()
    call SilentExec("compiler %")
    if get(g:, 'mupdf_open', 0)
        call SilentExec("pkill --signal HUP mupdf")
    else
        let l:pdff = expand('%:r').'.pdf'
        if filereadable(l:pdff)
            silent !mupdf %:r.pdf & disown
            let g:mupdf_open = 1
        endif
    endif
endfunction

function! EchoToggle(text, status)
	echo a:text a:status ? "on" : "off"
endfunction

function! ToggleWhitespaceFix()
    let g:whitespacefix = !get(g:, 'whitespacefix', 1)
endfunction
"""" ---- FUNCTIONS ----

"""" ++++ PLUGIN CONFIG ++++
" TRIM OUT THE FAT - GlaDOS
" FixWhitespace
let g:extra_whitespace_ignored_filetypes = ['diff', 'patch']

" Easytags
let g:easytags_file = '~/.cache/vim/tags/easytags'
let g:easytags_async = 1
let g:easytags_dynamic_files = 0
let g:easytags_events =['BufWritePost', 'BufReadPost']
let g:easytags_include_members = 1

" Git Gutter
let g:gitgutter_highlight_lines = 0
let g:gitgutter_highlight_linesnrs = 0
let g:gitgutter_sign_added              = '++'
let g:gitgutter_sign_removed            = '--'
let g:gitgutter_sign_modified           = '~~'
let g:gitgutter_sign_removed_first_line = 'KK'
let g:gitgutter_sign_modified_removed   = '~~'
let g:gitgutter_map_keys = 0

" Vimtex
let g:vimtex_compiler_enabled = 0

" YCM
let g:ycm_show_diagnostics_ui = 0
let g:ycm_open_loclist_on_ycm_diags = 0
let g:ycm_confirm_extra_conf = 0
if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex=g:vimtex#re#youcompleteme
set completeopt-=preview

" Syntastic
let g:syntastic_error_symbol = ">!"
let g:syntastic_warning_symbol = ">?"
let g:syntastic_style_error_symbol = "s!"
let g:syntastic_style_warning_symbol = "s?"
let g:syntastic_aggregate_errors = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_ignore_files = ['\m\c.tex$']
let g:syntastic_python_pylint_quiet_messages = { "level" : "warnings" }

function! SyntasticCheckHook(errors)
    call lightline#update()
endfunction
"""" ---- PLUGIN CONFIG ----

"""" ++++ AUTOCMDS ++++

augroup displaystuf
    autocmd!
    autocmd FileType c,h,hpp,cpp,diff,cs,python,vim,sh,cfg,sp,inc,tex setlocal nowrap nospell

    autocmd FileType tex let g:tex_no_error=1
    autocmd VimLeave *.tex !texclear %
    autocmd BufWritePre *.tex let g:tex_modified = &modified
    autocmd BufWritePost *.tex if get(g:, 'tex_modified', 0) | call CompTexRefMU()

    autocmd BufWritePre * if get(g:, 'whitespacefix', 1) | :FixWhitespace
    autocmd BufRead,BufNewFile vimrc setlocal expandtab
    autocmd BufRead,BufNewFile aliasrc,defines* set filetype=sh
    autocmd BufRead,BufNewFile *.conf,*.cfg set filetype=conf
    autocmd BufRead fonts.conf set ft=html
    autocmd BufRead,BufNewFile *.inc set filetype=include | set syntax=sourcepawn

    "continue where you left off
    autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
                \| exe "normal! g'\""
                \| endif
augroup END

augroup VCenterCursor
  au!
  au BufEnter,WinEnter,WinNew,VimResized *,*.*
        \ let &scrolloff=winheight(win_getid())/2
augroup END

augroup pluginstuff
    autocmd!
    "activate anyfold on every file
    "autocmd Filetype * AnyFoldActivate
    "open NERDTree automatically when vim starts up on opening a directory
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter *
                \| if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in")
                \| exe 'NERDTree' argv()[0]
                \| wincmd p
                \| ene
                \| endif
augroup END
"""" ---- AUTOCMDS ----

"""" ++++ GENERAL CONFIG ++++
" TRIM OUT THE FAT - GlaDOS
syntax enable
filetype plugin indent on
let mapleader=' '
set nocompatible
set encoding=UTF-8
set exrc
set secure
set number relativenumber
set hidden
set ttyfast
set laststatus=2
set noshowmode
set showcmd
"commandmode autocomplete
set wildmode=longest,list,full

"do not delete backup file
set backup
"create a backup file
set writebackup
set undofile
set swapfile
set updatetime=1000

set signcolumn=yes
set colorcolumn=80
set wrap
set textwidth=0
set tabstop=4
set shiftwidth=4
set noexpandtab
set autoindent
set smartindent
set listchars=tab:←-→,space:·,eol:~,extends:¬,precedes:⏗
set fillchars=vert:\ ,fold:-,stl:=

set scrolloff=3

"don't do folds when opening a file (doesn't disable fold feature)
set nofoldenable
set foldmethod=syntax
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
"""" ---- GENERAL CONFIG ----

"""" ++++ MAPPINGS ++++
inoremap jk <esc>
nnoremap U :echo " < < ===== C H E C K   C A P S   L O C K ===== > > "<CR>
"print token type
nnoremap <silent> <space>s :echo synIDattr(synID(line('.'), col('.'), 1), 'name')<cr>

nnoremap <space>w :w<cr>
nnoremap <space>W :w!<cr>
nnoremap <space>q :q<cr>
nnoremap <space>Q :q!<cr>
nnoremap Q :echo "It's '\<space\>Q' milord!"<cr>
nnoremap <space>e :e<cr>
nnoremap <space>E :e!<cr>
nnoremap <space><C-e> :E<cr>
nnoremap <space><space>q :wq<cr>

set pastetoggle=<F2>
nnoremap <F2> :set invpaste paste?<CR>

" Navigating with guides
inoremap <c-space> <esc>/<++><Enter>"_c4l
vnoremap <c-space> <esc>/<++><Enter>"_c4l
noremap <c-space> <esc>/<++><Enter>"_c4l

"turn off search highlight until next search
nnoremap <space>/ :nohlsearch<CR>

nnoremap silent <space>n :next<cr>
nnoremap silent <space>p :previous<cr>

"folds
nnoremap fa za
nnoremap fA zA
nnoremap tf @=(&foldlevel?'zM':'zR')<CR>

" :: SNIPPETS ::
inoremap {<cr> {<cr><bs>}<esc>O
"check.h START_TEST/END_TEST block
inoremap ;ST START_TEST()<esc>mzo{<cr><++><cr>}<cr>END_TEST<esc>`zi
"function template
inoremap ;FC <cr><cr><++>(<++>)<cr>{<cr><++><cr>}<esc>4ki
"header guard
inoremap ;HG _<c-r>=expand("%:t")<cr><esc>hr_VUI#ifndef <esc>lv$h""yo#define <esc>""po<cr><cr>#endif /* <esc>""pA */<esc>kk

"toggles
noremap <space>p :setlocal spell! <bar> call EchoToggle("Spellcheck", &spell)<CR>
noremap <space>g :setlocal wrap! <bar> call EchoToggle("Linewrap", &wrap)<CR>
noremap <space><tab> :setlocal expandtab! <bar> call EchoToggle("Expandtab", &expandtab)<CR>
noremap <space>C :set cursorline! <bar> call EchoToggle("Cursorline", &cursorline)<CR>
noremap <space>i :set list! <bar> call EchoToggle("Whitespace", &list)<CR>
noremap <F1> :call ToggleWhitespaceFix() <bar> call EchoToggle("Whitespace fix", get(g:, 'whitespacefix', 1))<CR>

" Line manipulation
"move lines
nnoremap <c-j> mZddp`Zj
nnoremap <c-k> mZddkP`Z2k
nnoremap <c-c> mZyyp`Zj
inoremap <c-c> <esc>mZyyp`Zjli
inoremap <c-d> <esc>Vdi
"indents
nnoremap <c-h> <i{<CR>
nnoremap <c-l> >i{<CR>

"split nav
nnoremap <space>h <c-w>h
nnoremap <space>j <c-w>j
nnoremap <space>k <c-w>k
nnoremap <space>l <c-w>l
nnoremap <space>H <c-w><
nnoremap <space>J <c-w>+
nnoremap <space>K <c-w>-
nnoremap <space>L <c-w>>

noremap <space>[ gT
noremap <space>] gt

" Plugin binds
nnoremap <space>t :NERDTreeToggle<cr>
nnoremap <space>pi :PlugInstall<cr>
nnoremap <space>pc :PlugClean<cr>
nnoremap <space>pu :PlugUpdate<cr>
nnoremap <space>pU :PlugUpgrade<cr>
nnoremap <space>ps :PlugStatus<cr>

nnoremap <F8> :TagbarToggle<cr>
"""" ---- MAPPINGS ----

"""" ++++ COLORS ++++
" Set to 256 for 256+ terms, as well as good colorscheme support.
" Set to 16 to use xresources
set t_Co=16
set t_ut=
set background=light
"colorscheme gruvbox
" Highlighting
highlight Comment           cterm=italic
highlight Search            cterm=reverse
highlight IncSearch         cterm=reverse
highlight Normal            ctermbg=none
highlight SignColumn        ctermbg=none
highlight CursorLine        ctermbg=darkgrey    cterm=none
highlight CursorColumn      ctermbg=darkgrey    cterm=none
highlight ColorColumn       ctermbg=darkgrey    ctermfg=none
highlight Folded            ctermbg=none        ctermfg=darkblue    cterm=italic
highlight Pmenu             ctermbg=darkgrey    ctermfg=white       cterm=bold
highlight PmenuSel          ctermbg=darkyellow  ctermfg=white       cterm=bold
highlight LineNrAbove       ctermbg=none        ctermfg=grey
highlight LineNr            ctermbg=none        ctermfg=magenta     cterm=bolditalic
highlight LineNrBelow       ctermbg=none        ctermfg=grey
highlight MatchParen        ctermbg=yellow      ctermfg=black
highlight TabLineFill       ctermbg=white       ctermfg=black
highlight TabLineSel        ctermbg=green       ctermfg=black
highlight TabLine           ctermbg=gray        ctermfg=black
highlight Todo              ctermbg=none        ctermfg=green       cterm=bolditalic

" Easytags
highlight cTypeTag      ctermfg=lightyellow
highlight cFunctionTag  ctermfg=yellow
highlight cMemberTag    ctermfg=darkyellow

" Git Gutter
highlight GitGutterAdd          ctermfg=darkblue    cterm=bold
highlight GitGutterChange       ctermfg=lightyellow cterm=bold
highlight GitGutterDelete       ctermfg=darkmagenta cterm=bold
highlight GitGutterChangeDelete ctermfg=darkmagenta cterm=bold,underline

" Syntastic
highlight SyntasticError        ctermbg=lightcyan
highlight SyntasticWarning      ctermbg=lightblue
highlight SyntasticStyleError   ctermbg=lightred
highlight SyntasticStyleWarning ctermbg=lightyellow

highlight SyntasticErrorSign        ctermbg=darkred
highlight SyntasticWarningSign      ctermbg=darkyellow
highlight SyntasticStyleErrorSign   ctermbg=darkcyan
highlight SyntasticStyleWarningSign ctermbg=darkgrey

highlight SyntasticErrorLine        ctermfg=darkred
highlight SyntasticWarningLine      ctermfg=darkyellow
highlight SyntasticStyleErrorLine   ctermfg=darkcyan
"highlight SyntasticStyleWarningLine ctermfg=darkblue
"""" ---- COLORS ----
