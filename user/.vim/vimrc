"{{{ Plugins
"Disable matchparen plugin
"let g:loaded_matchparen = 1
"let g:matchparen_timeout = 10

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"{{{ ALE Preconfig
let g:ale_linters={
      \ 'c':['clangd'],
      \ 'sh':['shellcheck'],
      \ 'html':['htmlhint'],
      \ 'htmldjango':['htmlhint'],
      \ 'htmljinja':['htmlhint'],
      \ 'css':['stylelint'],
      \ }
"let g:ale_c_clangd_options = '--compile-commands-dir=' . expand('%:p:h:h')
let g:ale_linter_aliases = {
      \ 'htmldjango':['html'],
      \ 'htmljinja':['html'],
      \}

let g:ale_css_stylelint_options = '--config ~/.config/stylelint.json'

let g:python_ale_linter = 'pylsp'
if g:python_ale_linter =~? 'flake8'
  let g:ale_linters['python'] = ['flake8']
  let g:ale_type_map['flake8'] = {'E': 'W', 'ES': 'WS'}
  let g:ale_python_flake8_options='--extend-ignore=W191,E741,E231,E302,E225,E401,E305,F841,F401,E251,E402 --max-line-length=120'
elseif g:python_ale_linter =~? 'pylsp'
  let g:ale_linters['python'] = ['pylsp']
endif

let g:ale_sh_shellcheck_exclusions='SC2034,SC1091'

let g:ale_warn_about_trailing_blank_lines=0
let g:ale_warn_about_trailing_whitespace=0
let g:ale_linters_explicit=1
let g:ale_lint_on_text_changed=1
let g:ale_lint_on_insert_leave=1
let g:ale_lint_on_enter=1
let g:ale_lint_on_save=1
let g:ale_lint_on_filetype_changed=1
let g:ale_lint_delay=0

let g:ale_close_preview_on_insert=1

let g:ale_popup_menu_enabled=1
let g:ale_hover_cursor=0
let g:ale_hover_format='popup'
let g:ale_detail_format=''
let g:ale_cursor_detail=0
let g:ale_echo_cursor=1
let g:ale_echo_delay=100

let g:ale_completion_enabled=1
let g:ale_completion_autoimport=1
let g:ale_completion_delay=100
let g:ale_sign_error = '!!'
let g:ale_sign_warning = '??'
let g:ale_sign_style_error = '!'
let g:ale_sign_style_warning = '?'
"}}} ALE Preconfig
"{{{ Plugin list
call plug#begin('~/.vim/plugged')
Plug 'Konfekt/FastFold'
Plug 'tmhedberg/SimpylFold'
let g:SimpylFold_fold_docstring=0
" Matchup because matchparen is unacceptably slow
Plug 'andymass/vim-matchup'
let g:matchup_matchparen_stopline=200
let g:matchup_matchparen_deferred=1
let g:matchup_matchparen_timeout=100

Plug 'godlygeek/tabular'
Plug 'bronson/vim-trailing-whitespace'
let g:extra_whitespace_ignored_filetypes = ['diff', 'patch']
let g:lsp_cxx_hl_use_text_props = 1 " ???

Plug 'preservim/nerdtree'
let NERDTreeIgnore = ['\.meta','\.o']
Plug 'dsimidzija/vim-nerdtree-ignore'
Plug 'mbbill/undotree'
let g:undotree_WindowLayout=2
let g:undotree_SplitWidth=40
let g:undotree_DiffpanelHeight=10
let g:undotree_SetFocusWhenToggle=1
let g:undotree_RelativeTimestamp=0

Plug 'itchyny/lightline.vim'
Plug 'lifepillar/vim-mucomplete'
let g:mucomplete#enable_auto_at_startup=1
let g:mucomplete#no_mappings=1
let g:mucomplete#chains = {}
let g:mucomplete#chains.default  = ['path', 'omni', 'keyn', 'dict', 'uspl', 'ulti']

"Plug 'OmniSharp/omnisharp-vim'
Plug 'dense-analysis/ale'

"Plug 'habamax/vim-godot'
Plug '~/.vim/_plugged/vim-godot'
Plug 'pulkomandy/c.vim'
"Plug 'qtc-de/vve'
Plug '~/.vim/_plugged/vve-fork'

Plug 'whatyouhide/vim-tmux-syntax'

" Holy fuck this plugin breaks so many things.
if expand("%:e") =~ 'py$'
  Plug 'sheerun/vim-polyglot'
endif
"Plug 'ludovicchabant/vim-gutentags'
"Plug 'xolox/vim-misc'
"Plug 'xolox/vim-easytags'
Plug 'mitsuhiko/vim-jinja'
Plug 'AndrewRadev/tagalong.vim'
Plug '~/.vim/_plugged/N'
call plug#end()

"}}} Plugin list
"{{{ Config
"{{{gutentags
let g:gutentags_enabled = 1
let g:gutentags_ctags_extra_args = [
      \ '--fields=+liaSszt',
      \'--c-kinds=+p', '--c++-kinds=+p',
      \'--exclude=docs', '--exclude=Documentation',
      \'--exclude=*.json',
      \'--exclude=*.txt',
      \'--exclude=*.xml',
      \'--exclude=*.rc',
      \'--exclude=*.bat',
      \'--exclude=*.properties',
      \'--exclude=*.build',
      \'--exclude=*.plist',
      \'--exclude=*.in',
      \'--exclude=*.m',
      \'--exclude=*.md',
      \'--exclude=*.mk',
      \'--exclude=Makefile',
      \'--exclude=vendor/sqlite3', '--exclude=vendor/tcl', '--exclude=vendor/tk',
      \'--exclude=build', '--exclude=_build'
      \]
let g:gutentags_generate_on_missing = 0
let g:gutentags_generate_on_write = 0
let g:gutentags_dont_load = 0
let g:gutentags_project_root = ['config.mk', 'Makefile']
"}}}gutentags
"{{{easytags
let g:easytags_async = 1
let g:easytags_dynamic_files = 1
let g:easytags_always_enabled = 0
let g:easytags_on_cursorhold = 0
let g:easytags_auto_update = 0
let g:easytags_auto_highlight = 0
let g:easytags_autorecurse = 0
"let g:easytags_events = ['']
"}}}easytags
"}}}
"}}} Plugins
"{{{ Functions
function! GetCursorChar()
  return char2nr(matchstr(getline('.'), '\%' . col('.') . 'c.'))
endfunction

function! SilentExec(cmd)
  let cmd = substitute(a:cmd, '^!', '', '')
  let cmd = substitute(cmd, '%', shellescape(expand('%')), '')
  call system(cmd)
endfunction

function! CompTexRefMU()
  call SilentExec('compiler %')
  if get(g:, 'mupdf_open', 0)
    call SilentExec('pkill --signal HUP mupdf')
  else
    let l:pdff = expand('%:r').'.pdf'
    if filereadable(l:pdff)
      silent !mupdf %:r.pdf & disown
      let g:mupdf_open = 1
    endif
  endif
endfunction

function! OnOff(status)
  return a:status ? 'on' : 'off'
endfunction
function! ToggleMatchup()
  let g:matchup_enabled = !get(g:, 'matchup_enabled', 1)
  if get(g:, 'matchup_enabled', 1)
    execute 'DoMatchParen'
  else
    execute 'NoMatchParen'
  endif
  echo 'Matchup ' . OnOff(get(g:, 'matchup_enabled', 1))
endfunction
"}}} Functions
"{{{ Vim Config
"{{{ Sensible Defaults
syntax enable
filetype plugin indent on
set nocompatible
set nojoinspaces
set encoding=UTF-8
set pastetoggle=<F2>
let mapleader=' '
set splitbelow
set splitright
"}}} Sensible Defaults
set exrc
set secure
set number
set nohidden
set ttyfast
set laststatus=2
set noshowmode
set showcmd
set sessionoptions=buffers,curdir,folds,tabpages
"commandmode autocomplete
set wildmode=longest,list,full
set wildmenu

"{{{ Backup/Undo/Swap
"create a backup file
set writebackup
"do not delete backup file
set backup
set backupdir=~/.cache/vim/backup

set undofile
set undolevels=2000
set undoreload=0

set swapfile
set updatetime=300
"}}} Backup/Undo/Swap

set signcolumn=number

"{{{ Line wrapping
set textwidth=0
set colorcolumn=110
set textwidth=109
set nowrap
"set linebreak
set breakindent
"}}} Line wrapping
"{{{ Indenting
set tabstop=4
set shiftwidth=0
set softtabstop=0
set shiftround
set noexpandtab
set autoindent
"set verbose=4
set smartindent
"}}} Indenting

function! FTEXT()
  let line = getline(v:foldstart)
  let sub = substitute(line, '^\s*\|/\*\|\*/\|[{}]\{3}\d\=\|"\+\s*[{}]\{3}', '', 'g')
  let k = repeat(' ',&tabstop * (v:foldlevel - 1))
  return k . sub
endfunction

set foldtext=FTEXT()

set listchars=tab:→\ \ ,space:·,eol:~,extends:>,precedes:⏗,trail:¬
set fillchars=vert:\ ,fold:\ ,stl:\ ,stlnc:\ ,eob:\ 
set scrolloff=3
"modified default
set shortmess=inxtoO
set shortmess+=cwmsI
" turn-the-fuck-off the bell
set belloff=all
set completeopt-=preview,menu
if !has('nvim')
  set completeopt+=popup
endif
" I gotta reorganize this shit, do conditionals, test vim versions, check
" which plugins are installed and configure accordingly, etc. etc.
set completeopt+=menu,noinsert
"don't do folds when opening a file (doesn't disable fold feature)
set nofoldenable
set foldnestmax=2
set foldmethod=marker
set hlsearch
set incsearch
set ignorecase
set smartcase
set noshowmatch

" C indenting
set cino+=Ls,l1,(s
"}}} Vim Config
"{{{ NVim config
if has('nvim')
  unmap <C-L>
endif
"}}} NVim config
"{{{ Events
"{{{ Plugins
augroup Plugins
  autocmd!
"{{{ NERDTree
  " open NERDTree automatically when vim starts up on opening a directory
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter *
        \| if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in")
        \|   exe 'NERDTree' argv()[0]
        \| wincmd p
        \|   enew
        \| endif
"}}} NERDTree

  autocmd VimEnter * :NoMatchParen
  autocmd User GutentagsUpdated :HighlightTags
augroup END
"}}} Plugins
"{{{ Display
augroup Display
  autocmd!
  " Fix trailing whitespace, if the fix is enabled
  autocmd BufWritePre * if get(g:, 'whitespacefix', 1) | :FixWhitespace
  " Center the scroll offset
  autocmd BufEnter,WinNew,VimResized *,*.* let &scrolloff=winheight(win_getid())/2

  " continue where you left off
  autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g'\""
        \| endif
augroup END
"}}} Display

"{{{ Filetype Settings
augroup FiletypeSettings
  autocmd!
"{{{ txt
    autocmd FileType text set expandtab | set tabstop=2
"}}}
"{{{ TEX ???
  autocmd FileType tex let g:tex_no_error=1
  " 'texclear', when given *.tex, should remove all files generated as a result of calling CompTexRefMU
  autocmd VimLeave *.tex !texclear %
  autocmd BufWritePre *.tex let g:tex_modified = &modified
  autocmd BufWritePost *.tex if get(g:, 'tex_modified', 0) | call CompTexRefMU()
"}}} TEX
augroup END
"}}} Filetype Settings
"{{{ Snippets
augroup Snippets
  autocmd!
  "{{{ C-like
  "header guard
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap ;hg <esc>ggO<c-r>=expand("%:t")<cr><esc>hr_I#ifndef <esc>lv$h""yo#define <esc>""po<esc>Go<cr><esc>I#endif /* <esc>""pA */<esc>gg3ji
  "header guard but case is that of filename
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap ;HG <esc>ggO<c-r>=expand("%:t")<cr><esc>hr_VUI#ifndef <esc>lv$h""yA<esc>o#define <esc>""pA<esc>o<esc>Go<cr><esc>I#endif /* <esc>""pA */<esc>gg3ji
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap ;;HG <esc>ggO<c-r>=expand("%:t")<cr><esc>hr_VI#ifndef __<esc>lv$h""yA__<esc>o#define __<esc>""pA__<esc>o<esc>Go<cr><esc>I#endif /* __<esc>""pA__ */<esc>gg3ji
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap ;HR <esc>:%s/#\(ifndef\\|define\\|endif \/[\/\*]\) \zs[A-Z_]\+_H/\=substitute(substitute(toupper(expand("%:p")),"\\.","_","g"), ".\\{-}\/\\(\\w\\+\\)\/\\(\\w\\+\\)_H$", "\\1_\\2_H", "")/<cr>
  "header include from current filename
  autocmd FileType c,cpp,glsl,hlsl,cs inoremap ;hi <esc>ggO<del><c-r>=expand("%:t")<cr><esc>I#include "<esc>$rhA"<cr><esc>o
  " automatically insert '/*  */' when '/**' is done
  autocmd FileType c,cpp,glsl,hlsl,cs,awk inoremap /** **/<esc>hhi/<esc>lli<space><space><esc>i
  " when '{<cr>', create a block. Any text after cursor when done will be
  " placed in block
  autocmd FileType c,cpp,d,glsl,hlsl,cs,awk,css,json,gsl,gdscript inoremap {<cr> }<esc>i{<cr><esc>O
  autocmd FileType c,cpp,d,glsl,hlsl,cs,awk,css,json,gsl,gdscript inoremap [<cr> ]<esc>i[<cr><esc>O
  autocmd FileType c,cpp,d,glsl,hlsl,cs,awk,css,json,gsl,gdscript inoremap (<cr> )<esc>i(<cr><esc>O
  autocmd FileType c,cpp,d,glsl,hlsl,cs,awk,css,json,gsl,gdscript inoremap /*<cr> <space><esc>DA/*<cr>*/<esc>O<space><esc>PA<bs><bs>

  autocmd FileType c,cpp,d,glsl,hlsl,cs,awk,css inoremap {;<cr> };<esc>hi{<cr><esc>O
  autocmd FileType c,cpp,d,glsl,hlsl,cs,awk,css inoremap [;<cr> ];<esc>hi[<cr><esc>O
  autocmd FileType c,cpp,d,glsl,hlsl,cs,awk,css inoremap (;<cr> );<esc>hi(<cr><esc>O
  autocmd FileType json inoremap {,<cr> },<esc>hi{<cr><esc>O
  autocmd FileType json inoremap [,<cr> ],<esc>hi[<cr><esc>O
  autocmd FileType json inoremap (,<cr> ),<esc>hi(<cr><esc>O

  autocmd FileType c,cpp,d,glsl,hlsl,cs,awk,css,json inoremap {<space><cr> }<esc>i<cr>{<cr><esc>O
  autocmd FileType c,cpp,d,glsl,hlsl,cs,awk,css,json inoremap [<space><cr> ]<esc>i<cr>[<cr><esc>O
  autocmd FileType c,cpp,d,glsl,hlsl,cs,awk,css,json inoremap (<space><cr> )<esc>i<cr>(<cr><esc>O
  autocmd FileType c,cpp,d,glsl,hlsl,cs,awk,css inoremap {<space>;<cr> };<esc>hi<cr>{<cr><esc>O
  autocmd FileType c,cpp,d,glsl,hlsl,cs,awk,css inoremap [<space>;<cr> ];<esc>hi<cr>[<cr><esc>O
  autocmd FileType c,cpp,d,glsl,hlsl,cs,awk,css inoremap (<space>;<cr> );<esc>hi<cr>(<cr><esc>O
  autocmd FileType json inoremap {<space>,<cr> },<esc>hi<cr>{<cr><esc>O
  autocmd FileType json inoremap [<space>,<cr> ],<esc>hi<cr>[<cr><esc>O
  autocmd FileType json inoremap (<space>,<cr> ),<esc>hi<cr>(<cr><esc>O

  "???
  autocmd FileType c,cpp,glsl,hlsl,cs,awk inoremap <C-{> <esc>V:s/^\t\\|^ \{4\}//<cr>i
  "}}} C-like
  "{{{ C#
  autocmd FileType cs nnoremap <silent> <space>R :echo "Restarting OmniSharp Server" <bar> OmniSharpRestartServer <bar> echo "Server restarted"<cr>
  autocmd FileType cs nnoremap <silent> <space>P :OmniSharpHighlightEcho<cr>
  "}}}
  "{{{ XML
  autocmd FileType xml inoremap <?xml> <?xml version="1.0" encoding="utf-8"?>
  "}}} XML
augroup END
"{{{ Shebangs
  inoremap ;!s #!/usr/bin/env sh<cr><cr>
  inoremap ;!p #!/usr/bin/env python<cr><cr>
"}}}
"}}} Snippets
"}}} Events
"{{{ Mappings
"{{{ Plugins
"{{{ matchup
nnoremap <silent> <space>o <cmd>call ToggleMatchup()<cr>
"}}}
"{{{ ALE
nnoremap <silent> <space>v <cmd>ALENextWrap<cr>
nnoremap <silent> <space>V <cmd>ALEPreviousWrap<cr>
nnoremap <silent> <space>R <cmd>ALERename<cr>
"}}}
"{{{ Misc
nnoremap <silent> <space>t <cmd>NERDTreeToggle<cr>
nnoremap <silent> <space>T <cmd>UndotreeToggle<cr>

" Unused for now
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif &filetype==?'cs' && exists('g:OmniSharp_loaded') && g:OmniSharp_loaded
      execute 'OmniSharpDocumentation'
  elseif exists('g:loaded_ale') && g:loaded_ale
    execute 'ALEHover'
  else
    execute '!' . &keywordprg . ' ' . expand('<cword>')
  endif
endfunction
if !has('nvim')
  nnoremap <silent> K <cmd>call <SID>show_documentation()<cr>
endif
nnoremap <silent> <space>m <cmd>ALEDetail<cr>

" use tab and shift-tab to navigate complete items, if completion is visible
"inoremap <silent><expr> <tab> pumvisible() ? "\<c-n>" : "\<tab>"
"inoremap <silent><expr> <s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
"}}} Misc
"}}} Plugins
"{{{ Files
" Close all but current buffer
nnoremap <silent> mbo <cmd>%bd <bar> e# <bar> bd#<cr>

nnoremap <space>w <cmd>w<cr>
nnoremap <space>W <cmd>w!<cr>
nnoremap <space>q <cmd>q<cr>
nnoremap <space>Q <cmd>q!<cr>
nnoremap Q <cmd>echo "It's '\<space\>Q' milord!"<cr>
nnoremap <space>e <cmd>e<cr>
nnoremap <space>E <cmd>e!<cr>
" ???
nnoremap <space><C-e> :E<cr>

" Change vim's working directory to the current file's
nnoremap <silent> <space><space>c <cmd>lcd %:p:h<bar>pwd<cr>
" Change vim's working directory to the current file's parent
nnoremap <silent> <space><space>u <cmd>lcd ..<bar>pwd<cr>

"nnoremap <space>O :UpdateTypesFile<cr>
"}}} Files
"{{{ Folds
" Toggle current fold
nnoremap <silent> ga za
" Recursively toggle current fold
nnoremap <silent> gA zA
" Fold the lowest level of folds (or unfold all)
nnoremap <silent> gz @=(&foldlevel?'zm':'zR')<cr>
" Toggle all folds on or off
nnoremap <silent> gZ @=(&foldlevel?'zM':'zR')<cr>
"}}} Folds
"{{{ Toggles
noremap <silent> <space><tab> <cmd>setlocal expandtab! <bar> echo "Expandtab " . OnOff(&expandtab)<cr>
noremap <silent> <space>p <cmd>setlocal spell! <bar> echo "Spellcheck " . OnOff(&spell)<cr>
noremap <silent> <space>g <cmd>set wrap! <bar> echo "Linewrap " . OnOff(&wrap)<cr>
noremap <silent> <space>c <cmd>set cursorline! <bar> echo "Cursorline "  . OnOff(&cursorline)<cr>
noremap <silent> <space>C <cmd>set cursorcolumn! <bar> echo "Cursorcolumn "  . OnOff(&cursorcolumn)<cr>
noremap <silent> <space>i <cmd>set list! <bar> echo "Whitespace " . OnOff(&list)<cr>
noremap <silent> <F1> <cmd>let g:whitespacefix = !get(g:, 'whitespacefix', 1)
      \ <bar> echo "Whitespace fix " . OnOff(get(g:, 'whitespacefix', 1))<cr>
"}}} Toggles
"{{{ Lines
" move the current line down (and keep cursor offset)
nnoremap <c-j> mZddp`Zj
" move the current line up (and keep cursor offset)
nnoremap <c-k> mZddkP`Z2k
" duplicate the current line below
nnoremap <c-c> mZyyp`Zj
inoremap <c-c> <esc>mZyyp`Zjli

" reverse text in visual selection
vnoremap ;rv <cmd>set revins<cr>c<c-r>"<esc>:set norevins<cr>
nnoremap ;rv ^v$h<cmd>set revins<cr>c<c-r>"<esc>:set norevins<cr>

"}}} Lines
"{{{ Windows
nnoremap <space>h <c-w>h
nnoremap <space>j <c-w>j
nnoremap <space>k <c-w>k
nnoremap <space>l <c-w>l
nnoremap <space>H <c-w><
nnoremap <space>J <c-w>+
nnoremap <space>K <c-w>-
nnoremap <space>L <c-w>>
"}}} Windows
"{{{ Tabs
nnoremap <space><space>t  <cmd>tabe<space>
noremap <silent> <space>] <cmd>tabnext<cr>
noremap <silent> <space>[ <cmd>tabNext<cr>
noremap <silent> <space>} <cmd>tabm +1<cr>
noremap <silent> <space>{ <cmd>tabm -1<cr>
noremap <space>1 1gt<cr>
noremap <space>2 2gt<cr>
noremap <space>3 3gt<cr>
noremap <space>4 4gt<cr>
noremap <space>5 5gt<cr>
noremap <space>6 6gt<cr>
noremap <space>7 7gt<cr>
noremap <space>8 8gt<cr>
noremap <space>9 9gt<cr>
noremap <space>0 10gt<cr>
"}}} Tabs
"{{{ Misc
" clear search string
nnoremap <silent> <space>/ <cmd>nohlsearch<bar>diffupdate<cr>
" I don't know (mostly) what paste mode is
nnoremap <F2> <cmd>set invpaste paste?<cr>
" view next/previous file
nnoremap <silent> <space>n <cmd>next<cr>
nnoremap <silent> <space>N <cmd>previous<cr>

noremap <F3> <cmd>call EchoSyntaxInfo(line("."), col("."))<cr>
noremap <F4> <cmd>call EchoStyleInfo(line("."), col("."))<cr>

nnoremap <space>r <cmd>source $MYVIMRC<cr>

" Don't do weird stuff if I'm just trying to move around
nnoremap L l
nnoremap H h

vnoremap <space>s <cmd>'<,'>sort<cr>

vnoremap <space>x :!tidy -q -i --doctype omit --drop-proprietary-attributes yes --show-errors 0 -utf8<cr>
"}}} Misc
"}}} Mappings
"{{{ Colors
" On default colorscheme:
"   8, 16, 256 the color order is NR-8, otherwise it's NR-16 (:help cterm-colors)
set t_Co=256
set t_ut=
set background=light
"{{{ Defaults
highlight Comment                     ctermfg=darkmagenta cterm=none
highlight String                      ctermfg=darkyellow  cterm=none
highlight Type                        ctermfg=darkgreen
highlight StorageClass                ctermfg=yellow      cterm=italic
highlight link Structure StorageClass
highlight Special                     cterm=bold
highlight Identifier                  ctermfg=lightred    cterm=italic
highlight Function                    ctermfg=blue        cterm=none
highlight Statement                   ctermfg=darkcyan
highlight Conditional                 ctermfg=darkcyan
highlight Repeat                      ctermfg=darkcyan
highlight Keyword                     ctermfg=darkcyan
highlight Operator                    ctermfg=cyan
highlight Label                       ctermfg=blue
highlight Todo                        ctermfg=green       ctermbg=none cterm=bold,underline
highlight Include                     ctermfg=magenta
highlight Define                      ctermfg=magenta     cterm=bold
highlight Macro                       ctermfg=red
highlight PreProc                     ctermfg=red         cterm=italic
highlight PreCond                     ctermfg=darkred     cterm=bold
highlight Character                   ctermfg=yellow
highlight link shQuote Character
"}}} Defaults
"{{{ Markdown
highlight markdownCode ctermfg=cyan
highlight markdownLinkText ctermfg=blue cterm=italic
"}}} Markdown
"{{{ C
highlight cFixme ctermfg=darkyellow cterm=underline
highlight cTypedef ctermfg=darkmagenta cterm=italic
highlight link cDefine Define
highlight link cMacro Macro
highlight link cPreCondit PreCond
highlight link cCommentStartError Comment

highlight link CTagsDefinedName Macro
highlight CTagsConstant ctermfg=lightred

highlight link CTagsEnumeratorName Type
highlight CTagsEnumerationValue ctermfg=magenta

highlight CTagsExtern ctermfg=red
highlight link CTagsFile CTagsExtern

highlight CTagsNamespace ctermfg=darkblue
highlight link CTagsGlobalVariable NONE
highlight link CTagsType Type
highlight link CTagsUnion Type
highlight link CTagsStructure Type
highlight link CTagsMember CTagsGlobalVariable
highlight link CTagsFunction Function
highlight link CTagsLocalVariable CTagsGlobalVariable
"}}} C
"{{{ Vim
highlight Search ctermfg=black ctermbg=darkyellow
highlight IncSearch cterm=reverse
highlight VertSplit ctermfg=black ctermbg=white cterm=none
highlight link StatusLine VertSplit
highlight link StatusLineNC VertSplit
highlight Normal ctermbg=none
highlight Visual ctermfg=black ctermbg=darkgrey
highlight SignColumn ctermbg=none
highlight CursorLine ctermbg=darkgrey cterm=none
highlight CursorColumn ctermbg=darkgrey cterm=none
highlight ColorColumn ctermfg=none ctermbg=black
highlight Folded ctermfg=grey ctermbg=none
highlight Pmenu ctermfg=white ctermbg=black cterm=bold
highlight PmenuSel ctermfg=white ctermbg=darkgrey cterm=bold
highlight LineNrAbove ctermfg=darkgrey ctermbg=none
highlight LineNr ctermfg=grey ctermbg=none cterm=bold,italic
highlight LineNrBelow ctermfg=darkgrey ctermbg=none
highlight MatchParen ctermfg=black ctermbg=yellow
highlight TabLineFill ctermfg=black ctermbg=black cterm=none
highlight TabLineSel ctermfg=black ctermbg=white cterm=none
highlight TabLine ctermfg=black ctermbg=darkgrey cterm=italic

highlight SpellBad ctermfg=darkred ctermbg=none cterm=italic
highlight SpellCap ctermfg=blue ctermbg=none cterm=italic
highlight SpellRare ctermfg=cyan ctermbg=none cterm=underline
highlight SpellLocal ctermfg=blue ctermbg=none cterm=underline

highlight vimHighlight ctermfg=darkyellow
highlight vimMap ctermfg=yellow
highlight vimOption ctermfg=blue cterm=bold
highlight vimVar ctermfg=blue
highlight vimCommand ctermfg=red
highlight vimIsCommand ctermfg=yellow
highlight vimFunction ctermfg=magenta cterm=italic
highlight link vimFuncName vimFunction
highlight vimHICTerm ctermfg=green cterm=bold
highlight link vimHiCtermFgBg vimHICTerm
highlight vimHiGroup ctermfg=darkcyan
highlight link vimGroup vimHiGroup
highlight vimHiAttrib ctermfg=magenta
highlight link vimNotation vimHiAttrib
highlight link vimHiCtermColor vimHiAttrib
highlight link vimFgBgAttrib vimHiAttrib

highlight DiffAdd    ctermfg=black ctermbg=darkgreen
highlight DiffChange ctermfg=black ctermbg=darkcyan
highlight DiffDelete ctermfg=black ctermbg=darkred
highlight DiffText   ctermfg=black ctermbg=darkgrey
"}}} Vim
"{{{ Syntastic
highlight SyntasticError ctermfg=red ctermbg=black cterm=bold
highlight SyntasticWarning ctermbg=none cterm=none
highlight SyntasticStyleError ctermfg=none ctermbg=none cterm=none
highlight SyntasticStyleWarning ctermfg=none ctermbg=none cterm=none

highlight SyntasticErrorSign ctermbg=darkred
highlight SyntasticWarningSign ctermfg=darkyellow
highlight SyntasticStyleErrorSign ctermfg=none ctermbg=none cterm=none
highlight SyntasticStyleWarningSign ctermfg=none ctermbg=none cterm=none

highlight SyntasticErrorLine ctermfg=darkred cterm=none
highlight SyntasticWarningLine ctermfg=none ctermbg=none
highlight SyntasticStyleErrorLine ctermfg=none ctermbg=none cterm=none
highlight SyntasticStyleWarningLine ctermfg=none ctermbg=none cterm=none
"}}} Syntastic
"{{{ ALE
highlight link ALEError SyntasticError
highlight link ALEWarning SyntasticWarning
highlight link ALEStyleError SyntasticStyleError
highlight link ALEStyleWarning SyntasticStyleWarning

highlight link ALEErrorSign SyntasticErrorSign
highlight link ALEWarningSign SyntasticWarningSign
highlight link ALEStyleErrorSign SyntasticStyleErrorSign
highlight link ALEStyleWarningSign SyntasticStyleWarningSign

highlight link ALEErrorLine SyntasticErrorLine
highlight link ALEWarningLine SyntasticWarningLine
highlight link ALEStyleErrorLine SyntasticStyleErrorLine
highlight link ALEStyleWarningLine SyntasticStyleWarningLine
"}}} ALE
"}}} Colors
